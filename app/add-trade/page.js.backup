'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Cookies from 'js-cookie';
import Sidebar from '../../components/Sidebar';

export default function AddTrade() {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [user, setUser] = useState(null);
  const [showAccountDropdown, setShowAccountDropdown] = useState(false);
  const [showAddAccountModal, setShowAddAccountModal] = useState(false);
  const [editingAccountId, setEditingAccountId] = useState(null);
  const [editingBalance, setEditingBalance] = useState('');
  const [currentAccountId, setCurrentAccountId] = useState(1);
  
  // Accounts Management State
  const [accounts, setAccounts] = useState([
    { id: 1, name: 'Main Account', balance: 10000, tag: 'personal', color: 'bg-blue-600', isActive: true },
    { id: 2, name: 'Demo Account', balance: 5000, tag: 'demo', color: 'bg-purple-600', isActive: false },
  ]);
  const [newAccount, setNewAccount] = useState({
    name: '',
    balance: '',
    tag: 'personal'
  });

  // Alerts for sidebar
  const [alerts] = useState([
    { id: 1, status: 'new', message: 'Price alert triggered' },
    { id: 2, status: 'read', message: 'Trade completed' }
  ]);

  // Modal states
  const [showTradingPairModal, setShowTradingPairModal] = useState(false);
  const [showStrategyModal, setShowStrategyModal] = useState(false);
  const [customStrategy, setCustomStrategy] = useState('');
  const [imagePreview, setImagePreview] = useState(null);

  // Form data
  const [formData, setFormData] = useState({
    tradeType: 'long',
    accountId: null,
    accountSize: 0,
    riskPerTrade: '2',
    tradingPair: '',
    strategy: '',
    entryPrice: '',
    takeProfit: '',
    stopLoss: '',
    tradeDirection: 'long',
    tradeStatus: 'planning',
    quantity: '',
    notes: '',
    analysis: '',
    riskManagementLessons: '',
    tags: '',
    screenshot: null
  });

  // Calculated results
  const [calculatedResults, setCalculatedResults] = useState({
    riskAmount: 0,
    lotSize: 0,
    potentialProfit: 0,
    potentialLoss: 0,
    profitPips: 0,
    lossPips: 0,
    riskRewardRatio: 0
  });

  // Get current active account
  const currentAccount = accounts.find(acc => acc.id === currentAccountId) || accounts[0] || { 
    id: null, 
    name: 'No Account', 
    balance: 0, 
    tag: 'personal',
    color: 'bg-gray-600',
    isActive: false 
  };

  // Helper functions
  const getTagColor = (tag) => {
    const colors = {
      'personal': 'bg-blue-600',
      'funded': 'bg-green-600',
      'demo': 'bg-purple-600',
      'forex': 'bg-orange-600',
      'crypto': 'bg-indigo-600'
    };
    return colors[tag] || 'bg-gray-600';
  };

  const getTagDisplayName = (tag) => {
    const names = {
      'personal': 'Personal',
      'funded': 'Funded',
      'demo': 'Demo',
      'forex': 'Forex',
      'crypto': 'Crypto'
    };
    return names[tag] || tag;
  };

  // Sidebar handlers
  const handleAccountSwitch = (accountId) => {
    setCurrentAccountId(accountId);
    const selectedAccount = accounts.find(acc => acc.id === accountId);
    if (selectedAccount) {
      setFormData(prev => ({ 
        ...prev, 
        accountId: accountId,
        accountSize: selectedAccount.balance 
      }));
    }
  };

  const handleAddAccount = () => {
    setShowAddAccountModal(true);
  };

  const handleEditAccount = (accountId, updates) => {
    setAccounts(prev => prev.map(acc => 
      acc.id === accountId ? { ...acc, ...updates } : acc
    ));
  };

  const handleDeleteAccount = (accountId) => {
    if (accounts.length > 1) {
      setAccounts(prev => prev.filter(acc => acc.id !== accountId));
      if (currentAccountId === accountId) {
        const remainingAccounts = accounts.filter(acc => acc.id !== accountId);
        setCurrentAccountId(remainingAccounts[0]?.id || null);
      }
    }
  };

  const handleLogout = () => {
    Cookies.remove('auth-token');
    localStorage.removeItem('auth-token');
    localStorage.removeItem('user');
    router.push('/login');
  };

  // Trading pairs data with SVG flags
  const tradingPairs = {
    forex: [
      { 
        pair: 'EUR/USD', 
        name: 'Euro/US Dollar',
        flag1: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#003399"/><circle cx="15" cy="10" r="6" fill="none" stroke="#FFCC00" strokeWidth="1"/><g fill="#FFCC00">{[...Array(12)].map((_, i) => <circle key={i} cx={15 + 4.5 * Math.cos(i * Math.PI / 6)} cy={10 + 4.5 * Math.sin(i * Math.PI / 6)} r="0.5"/>)}</g></svg>,
        flag2: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#B22234"/>{[...Array(7)].map((_, i) => <rect key={i} y={i*20/13} width="30" height="20/13" fill={i % 2 ? "#B22234" : "white"}/>)}<rect width="12" height="20*7/13" fill="#3C3B6E"/></svg>,
        volume: 'Very High',
        spread: '0.8 pips'
      },
      { 
        pair: 'GBP/USD', 
        name: 'British Pound/US Dollar',
        flag1: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#012169"/><path d="M0,0 L30,20 M30,0 L0,20" stroke="white" strokeWidth="2"/><path d="M0,0 L30,20 M30,0 L0,20" stroke="#C8102E" strokeWidth="1"/><path d="M15,0 L15,20 M0,10 L30,10" stroke="white" strokeWidth="3"/><path d="M15,0 L15,20 M0,10 L30,10" stroke="#C8102E" strokeWidth="2"/></svg>,
        flag2: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#B22234"/>{[...Array(7)].map((_, i) => <rect key={i} y={i*20/13} width="30" height="20/13" fill={i % 2 ? "#B22234" : "white"}/>)}<rect width="12" height="20*7/13" fill="#3C3B6E"/></svg>,
        volume: 'Very High',
        spread: '1.2 pips'
      },
      { 
        pair: 'USD/JPY', 
        name: 'US Dollar/Japanese Yen',
        flag1: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#B22234"/>{[...Array(7)].map((_, i) => <rect key={i} y={i*20/13} width="30" height="20/13" fill={i % 2 ? "#B22234" : "white"}/>)}<rect width="12" height="20*7/13" fill="#3C3B6E"/></svg>,
        flag2: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="white"/><circle cx="15" cy="10" r="6" fill="#BC002D"/></svg>,
        volume: 'Very High',
        spread: '0.9 pips'
      },
      { 
        pair: 'USD/CHF', 
        name: 'US Dollar/Swiss Franc',
        flag1: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#B22234"/>{[...Array(7)].map((_, i) => <rect key={i} y={i*20/13} width="30" height="20/13" fill={i % 2 ? "#B22234" : "white"}/>)}<rect width="12" height="20*7/13" fill="#3C3B6E"/></svg>,
        flag2: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#FF0000"/><path d="M12,6 L18,6 L18,8 L22,8 L22,12 L18,12 L18,14 L12,14 L12,12 L8,12 L8,8 L12,8 Z" fill="white"/></svg>,
        volume: 'High',
        spread: '1.4 pips'
      },
      { 
        pair: 'AUD/USD', 
        name: 'Australian Dollar/US Dollar',
        flag1: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#012169"/><path d="M0,0 L30,20 M30,0 L0,20" stroke="white" strokeWidth="1"/><rect width="15" height="10" fill="#012169"/><path d="M0,0 L15,10 M15,0 L0,10" stroke="white" strokeWidth="1"/><g fill="white">{[...Array(6)].map((_, i) => <circle key={i} cx={20 + 2*Math.cos(i*Math.PI/3)} cy={4 + 2*Math.sin(i*Math.PI/3)} r="0.3"/>)}</g></svg>,
        flag2: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#B22234"/>{[...Array(7)].map((_, i) => <rect key={i} y={i*20/13} width="30" height="20/13" fill={i % 2 ? "#B22234" : "white"}/>)}<rect width="12" height="20*7/13" fill="#3C3B6E"/></svg>,
        volume: 'High',
        spread: '1.1 pips'
      },
      { 
        pair: 'USD/CAD', 
        name: 'US Dollar/Canadian Dollar',
        flag1: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#B22234"/>{[...Array(7)].map((_, i) => <rect key={i} y={i*20/13} width="30" height="20/13" fill={i % 2 ? "#B22234" : "white"}/>)}<rect width="12" height="20*7/13" fill="#3C3B6E"/></svg>,
        flag2: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="10" height="20" fill="#FF0000"/><rect x="10" width="10" height="20" fill="white"/><rect x="20" width="10" height="20" fill="#FF0000"/><path d="M15,6 L17,8 L15,10 L13,8 Z" fill="#FF0000"/></svg>,
        volume: 'High',
        spread: '1.3 pips'
      },
      { 
        pair: 'CAD/JPY', 
        name: 'Canadian Dollar/Japanese Yen',
        flag1: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="10" height="20" fill="#FF0000"/><rect x="10" width="10" height="20" fill="white"/><rect x="20" width="10" height="20" fill="#FF0000"/><path d="M15,6 L17,8 L15,10 L13,8 Z" fill="#FF0000"/></svg>,
        flag2: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="white"/><circle cx="15" cy="10" r="6" fill="#BC002D"/></svg>,
        volume: 'Low',
        spread: '2.3 pips'
      },
      { 
        pair: 'EUR/CHF', 
        name: 'Euro/Swiss Franc',
        flag1: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#003399"/><circle cx="15" cy="10" r="6" fill="none" stroke="#FFCC00" strokeWidth="1"/><g fill="#FFCC00">{[...Array(12)].map((_, i) => <circle key={i} cx={15 + 4.5 * Math.cos(i * Math.PI / 6)} cy={10 + 4.5 * Math.sin(i * Math.PI / 6)} r="0.5"/>)}</g></svg>,
        flag2: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#FF0000"/><path d="M12,6 L18,6 L18,8 L22,8 L22,12 L18,12 L18,14 L12,14 L12,12 L8,12 L8,8 L12,8 Z" fill="white"/></svg>,
        volume: 'Medium',
        spread: '1.7 pips'
      },
      { 
        pair: 'GBP/CHF', 
        name: 'British Pound/Swiss Franc',
        flag1: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#012169"/><path d="M0,0 L30,20 M30,0 L0,20" stroke="white" strokeWidth="2"/><path d="M0,0 L30,20 M30,0 L0,20" stroke="#C8102E" strokeWidth="1"/><path d="M15,0 L15,20 M0,10 L30,10" stroke="white" strokeWidth="3"/><path d="M15,0 L15,20 M0,10 L30,10" stroke="#C8102E" strokeWidth="2"/></svg>,
        flag2: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#FF0000"/><path d="M12,6 L18,6 L18,8 L22,8 L22,12 L18,12 L18,14 L12,14 L12,12 L8,12 L8,8 L12,8 Z" fill="white"/></svg>,
        volume: 'Medium',
        spread: '2.0 pips'
      },
      { 
        pair: 'AUD/CHF', 
        name: 'Australian Dollar/Swiss Franc',
        flag1: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#012169"/><path d="M0,0 L30,20 M30,0 L0,20" stroke="white" strokeWidth="1"/><rect width="15" height="10" fill="#012169"/><path d="M0,0 L15,10 M15,0 L0,10" stroke="white" strokeWidth="1"/><g fill="white">{[...Array(6)].map((_, i) => <circle key={i} cx={20 + 2*Math.cos(i*Math.PI/3)} cy={4 + 2*Math.sin(i*Math.PI/3)} r="0.3"/>)}</g></svg>,
        flag2: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#FF0000"/><path d="M12,6 L18,6 L18,8 L22,8 L22,12 L18,12 L18,14 L12,14 L12,12 L8,12 L8,8 L12,8 Z" fill="white"/></svg>,
        volume: 'Low',
        spread: '2.5 pips'
      },
      { 
        pair: 'NZD/CHF', 
        name: 'New Zealand Dollar/Swiss Franc',
        flag1: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#012169"/><rect width="15" height="10" fill="#012169"/><path d="M0,0 L15,10 M15,0 L0,10" stroke="white" strokeWidth="1"/><g fill="white">{[...Array(4)].map((_, i) => <circle key={i} cx={18 + 1.5*Math.cos(i*Math.PI/2)} cy={3 + 1.5*Math.sin(i*Math.PI/2)} r="0.3"/>)}</g></svg>,
        flag2: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#FF0000"/><path d="M12,6 L18,6 L18,8 L22,8 L22,12 L18,12 L18,14 L12,14 L12,12 L8,12 L8,8 L12,8 Z" fill="white"/></svg>,
        volume: 'Low',
        spread: '2.8 pips'
      },
      { 
        pair: 'EUR/AUD', 
        name: 'Euro/Australian Dollar',
        flag1: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#003399"/><circle cx="15" cy="10" r="6" fill="none" stroke="#FFCC00" strokeWidth="1"/><g fill="#FFCC00">{[...Array(12)].map((_, i) => <circle key={i} cx={15 + 4.5 * Math.cos(i * Math.PI / 6)} cy={10 + 4.5 * Math.sin(i * Math.PI / 6)} r="0.5"/>)}</g></svg>,
        flag2: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#012169"/><path d="M0,0 L30,20 M30,0 L0,20" stroke="white" strokeWidth="1"/><rect width="15" height="10" fill="#012169"/><path d="M0,0 L15,10 M15,0 L0,10" stroke="white" strokeWidth="1"/><g fill="white">{[...Array(6)].map((_, i) => <circle key={i} cx={20 + 2*Math.cos(i*Math.PI/3)} cy={4 + 2*Math.sin(i*Math.PI/3)} r="0.3"/>)}</g></svg>,
        volume: 'Medium',
        spread: '1.8 pips'
      },
      { 
        pair: 'GBP/AUD', 
        name: 'British Pound/Australian Dollar',
        flag1: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#012169"/><path d="M0,0 L30,20 M30,0 L0,20" stroke="white" strokeWidth="2"/><path d="M0,0 L30,20 M30,0 L0,20" stroke="#C8102E" strokeWidth="1"/><path d="M15,0 L15,20 M0,10 L30,10" stroke="white" strokeWidth="3"/><path d="M15,0 L15,20 M0,10 L30,10" stroke="#C8102E" strokeWidth="2"/></svg>,
        flag2: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#012169"/><path d="M0,0 L30,20 M30,0 L0,20" stroke="white" strokeWidth="1"/><rect width="15" height="10" fill="#012169"/><path d="M0,0 L15,10 M15,0 L0,10" stroke="white" strokeWidth="1"/><g fill="white">{[...Array(6)].map((_, i) => <circle key={i} cx={20 + 2*Math.cos(i*Math.PI/3)} cy={4 + 2*Math.sin(i*Math.PI/3)} r="0.3"/>)}</g></svg>,
        volume: 'Medium',
        spread: '2.2 pips'
      },
      { 
        pair: 'EUR/NZD', 
        name: 'Euro/New Zealand Dollar',
        flag1: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#003399"/><circle cx="15" cy="10" r="6" fill="none" stroke="#FFCC00" strokeWidth="1"/><g fill="#FFCC00">{[...Array(12)].map((_, i) => <circle key={i} cx={15 + 4.5 * Math.cos(i * Math.PI / 6)} cy={10 + 4.5 * Math.sin(i * Math.PI / 6)} r="0.5"/>)}</g></svg>,
        flag2: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#012169"/><rect width="15" height="10" fill="#012169"/><path d="M0,0 L15,10 M15,0 L0,10" stroke="white" strokeWidth="1"/><g fill="white">{[...Array(4)].map((_, i) => <circle key={i} cx={18 + 1.5*Math.cos(i*Math.PI/2)} cy={3 + 1.5*Math.sin(i*Math.PI/2)} r="0.3"/>)}</g></svg>,
        volume: 'Low',
        spread: '2.6 pips'
      },
      { 
        pair: 'GBP/NZD', 
        name: 'British Pound/New Zealand Dollar',
        flag1: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#012169"/><path d="M0,0 L30,20 M30,0 L0,20" stroke="white" strokeWidth="2"/><path d="M0,0 L30,20 M30,0 L0,20" stroke="#C8102E" strokeWidth="1"/><path d="M15,0 L15,20 M0,10 L30,10" stroke="white" strokeWidth="3"/><path d="M15,0 L15,20 M0,10 L30,10" stroke="#C8102E" strokeWidth="2"/></svg>,
        flag2: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#012169"/><rect width="15" height="10" fill="#012169"/><path d="M0,0 L15,10 M15,0 L0,10" stroke="white" strokeWidth="1"/><g fill="white">{[...Array(4)].map((_, i) => <circle key={i} cx={18 + 1.5*Math.cos(i*Math.PI/2)} cy={3 + 1.5*Math.sin(i*Math.PI/2)} r="0.3"/>)}</g></svg>,
        volume: 'Low',
        spread: '3.1 pips'
      },
      { 
        pair: 'AUD/CAD', 
        name: 'Australian Dollar/Canadian Dollar',
        flag1: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#012169"/><path d="M0,0 L30,20 M30,0 L0,20" stroke="white" strokeWidth="1"/><rect width="15" height="10" fill="#012169"/><path d="M0,0 L15,10 M15,0 L0,10" stroke="white" strokeWidth="1"/><g fill="white">{[...Array(6)].map((_, i) => <circle key={i} cx={20 + 2*Math.cos(i*Math.PI/3)} cy={4 + 2*Math.sin(i*Math.PI/3)} r="0.3"/>)}</g></svg>,
        flag2: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="10" height="20" fill="#FF0000"/><rect x="10" width="10" height="20" fill="white"/><rect x="20" width="10" height="20" fill="#FF0000"/><path d="M15,6 L17,8 L15,10 L13,8 Z" fill="#FF0000"/></svg>,
        volume: 'Medium',
        spread: '2.0 pips'
      },
      { 
        pair: 'NZD/CAD', 
        name: 'New Zealand Dollar/Canadian Dollar',
        flag1: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#012169"/><rect width="15" height="10" fill="#012169"/><path d="M0,0 L15,10 M15,0 L0,10" stroke="white" strokeWidth="1"/><g fill="white">{[...Array(4)].map((_, i) => <circle key={i} cx={18 + 1.5*Math.cos(i*Math.PI/2)} cy={3 + 1.5*Math.sin(i*Math.PI/2)} r="0.3"/>)}</g></svg>,
        flag2: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="10" height="20" fill="#FF0000"/><rect x="10" width="10" height="20" fill="white"/><rect x="20" width="10" height="20" fill="#FF0000"/><path d="M15,6 L17,8 L15,10 L13,8 Z" fill="#FF0000"/></svg>,
        volume: 'Low',
        spread: '2.7 pips'
      },
      { 
        pair: 'EUR/CAD', 
        name: 'Euro/Canadian Dollar',
        flag1: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#003399"/><circle cx="15" cy="10" r="6" fill="none" stroke="#FFCC00" strokeWidth="1"/><g fill="#FFCC00">{[...Array(12)].map((_, i) => <circle key={i} cx={15 + 4.5 * Math.cos(i * Math.PI / 6)} cy={10 + 4.5 * Math.sin(i * Math.PI / 6)} r="0.5"/>)}</g></svg>,
        flag2: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="10" height="20" fill="#FF0000"/><rect x="10" width="10" height="20" fill="white"/><rect x="20" width="10" height="20" fill="#FF0000"/><path d="M15,6 L17,8 L15,10 L13,8 Z" fill="#FF0000"/></svg>,
        volume: 'Medium',
        spread: '1.9 pips'
      },
      { 
        pair: 'GBP/CAD', 
        name: 'British Pound/Canadian Dollar',
        flag1: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#012169"/><path d="M0,0 L30,20 M30,0 L0,20" stroke="white" strokeWidth="2"/><path d="M0,0 L30,20 M30,0 L0,20" stroke="#C8102E" strokeWidth="1"/><path d="M15,0 L15,20 M0,10 L30,10" stroke="white" strokeWidth="3"/><path d="M15,0 L15,20 M0,10 L30,10" stroke="#C8102E" strokeWidth="2"/></svg>,
        flag2: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="10" height="20" fill="#FF0000"/><rect x="10" width="10" height="20" fill="white"/><rect x="20" width="10" height="20" fill="#FF0000"/><path d="M15,6 L17,8 L15,10 L13,8 Z" fill="#FF0000"/></svg>,
        volume: 'Medium',
        spread: '2.4 pips'
      },
      { 
        pair: 'CHF/JPY', 
        name: 'Swiss Franc/Japanese Yen',
        flag1: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#FF0000"/><path d="M12,6 L18,6 L18,8 L22,8 L22,12 L18,12 L18,14 L12,14 L12,12 L8,12 L8,8 L12,8 Z" fill="white"/></svg>,
        flag2: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="white"/><circle cx="15" cy="10" r="6" fill="#BC002D"/></svg>,
        volume: 'Low',
        spread: '2.9 pips'
      },
      { 
        pair: 'NZD/JPY', 
        name: 'New Zealand Dollar/Japanese Yen',
        flag1: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="#012169"/><rect width="15" height="10" fill="#012169"/><path d="M0,0 L15,10 M15,0 L0,10" stroke="white" strokeWidth="1"/><g fill="white">{[...Array(4)].map((_, i) => <circle key={i} cx={18 + 1.5*Math.cos(i*Math.PI/2)} cy={3 + 1.5*Math.sin(i*Math.PI/2)} r="0.3"/>)}</g></svg>,
        flag2: <svg className="w-5 h-3" viewBox="0 0 30 20"><rect width="30" height="20" fill="white"/><circle cx="15" cy="10" r="6" fill="#BC002D"/></svg>,
        volume: 'Low',
        spread: '2.4 pips'
      }
    ],
    crypto: [
      { 
        pair: 'BTC/USD', 
        name: 'Bitcoin/US Dollar',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#F7931A"><path d="M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm5.868 8.914c.264-1.76-.922-2.706-2.494-3.339l.51-2.042-1.245-.31-.496 1.988c-.327-.082-.663-.158-1.001-.234l.5-2.003-1.245-.31-.51 2.042c-.271-.061-.537-.123-.796-.187l.002-.006-1.717-.428-.331 1.326s.922.211.902.225c.503.126.594.458.579.722l-.58 2.325c.035.009.08.022.13.042l-.132-.033-.812 3.258c-.062.153-.218.383-.57.296.013.018-.902-.225-.902-.225l-.618 1.421 1.62.404c.302.076.597.154.887.229l-.515 2.067 1.245.31.51-2.043c.338.091.666.175.987.254l-.509 2.035 1.245.31.515-2.066c2.123.402 3.716.24 4.386-1.683.54-1.548-.027-2.44-1.144-3.022.814-.188 1.427-.722 1.59-1.826z"/></svg>,
        volume: 'Very High',
        spread: '$45'
      },
      { 
        pair: 'ETH/USD', 
        name: 'Ethereum/US Dollar',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#627EEA"><path d="M12 0L5.084 12.267 12 16.5l6.916-4.233L12 0zm0 18L5.084 13.767 12 24l6.916-10.233L12 18z"/></svg>,
        volume: 'Very High',
        spread: '$2.8'
      },
      { 
        pair: 'ADA/USD', 
        name: 'Cardano/US Dollar',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#0033AD"><circle cx="12" cy="12" r="12"/><path d="M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2zm0 18c-4.411 0-8-3.589-8-8s3.589-8 8-8 8 3.589 8 8-3.589 8-8 8z" fill="white"/></svg>,
        volume: 'High',
        spread: '$0.05'
      },
      { 
        pair: 'SOL/USD', 
        name: 'Solana/US Dollar',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#00FFA3"><path d="M4.5 7.5c.7-1.2 2.4-1.6 3.6-.9L21 11.5c.7.4.7 1.5 0 1.9L8.1 18.4c-1.2.7-2.9.3-3.6-.9L4.5 7.5z"/><path d="M4.5 16.5c.7 1.2 2.4 1.6 3.6.9L21 12.5c.7-.4.7-1.5 0-1.9L8.1 5.6c-1.2-.7-2.9-.3-3.6.9L4.5 16.5z"/></svg>,
        volume: 'High',
        spread: '$1.2'
      },
      { 
        pair: 'BNB/USD', 
        name: 'Binance Coin/US Dollar',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#F3BA2F"><path d="M12 2l3.09 3.09L12 8.18 8.91 5.09 12 2zm-4.5 4.5L10.59 9.6 7.5 12.69 4.41 9.6 7.5 6.5zm9 0l3.09 3.09-3.09 3.09-3.09-3.09L16.5 6.5zM12 15.82l3.09-3.09L18.18 15.82 12 22l-6.18-6.18L8.91 12.73 12 15.82z"/></svg>,
        volume: 'High',
        spread: '$3.5'
      },
      { 
        pair: 'AVAX/USD', 
        name: 'Avalanche/US Dollar',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#E84142"><path d="M12 2l10 18H2L12 2z"/><path d="M8 14h8l-4-6-4 6z" fill="white"/></svg>,
        volume: 'Medium',
        spread: '$1.8'
      },
      { 
        pair: 'DOT/USD', 
        name: 'Polkadot/US Dollar',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#E6007A"><circle cx="12" cy="12" r="10"/><circle cx="12" cy="7" r="2" fill="white"/><circle cx="12" cy="17" r="2" fill="white"/><circle cx="7" cy="12" r="2" fill="white"/><circle cx="17" cy="12" r="2" fill="white"/></svg>,
        volume: 'Medium',
        spread: '$0.8'
      },
      { 
        pair: 'MATIC/USD', 
        name: 'Polygon/US Dollar',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#8247E5"><path d="M12 2l8 4.5v11L12 22l-8-4.5v-11L12 2z"/><path d="M8 8v8l4 2 4-2V8l-4-2-4 2z" fill="white"/></svg>,
        volume: 'Medium',
        spread: '$0.02'
      },
      { 
        pair: 'UNI/USD', 
        name: 'Uniswap/US Dollar',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#FF007A"><circle cx="12" cy="12" r="10"/><path d="M8 10c2-2 6-2 8 0" stroke="white" strokeWidth="2" fill="none"/><path d="M8 14c2 2 6 2 8 0" stroke="white" strokeWidth="2" fill="none"/></svg>,
        volume: 'Medium',
        spread: '$0.5'
      },
      { 
        pair: 'LINK/USD', 
        name: 'Chainlink/US Dollar',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#375BD2"><path d="M12 2l8 4.5v11L12 22l-8-4.5v-11L12 2z"/><path d="M9 9l6 0l-3 6-3-6z" fill="white"/></svg>,
        volume: 'Medium',
        spread: '$0.3'
      },
      { 
        pair: 'ATOM/USD', 
        name: 'Cosmos/US Dollar',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#2E3148"><circle cx="12" cy="12" r="10"/><circle cx="12" cy="12" r="3" fill="white"/><circle cx="12" cy="6" r="1.5" fill="white"/><circle cx="12" cy="18" r="1.5" fill="white"/><circle cx="6" cy="12" r="1.5" fill="white"/><circle cx="18" cy="12" r="1.5" fill="white"/></svg>,
        volume: 'Low',
        spread: '$0.4'
      }
    ],
    stocks: [
      { 
        pair: 'AAPL', 
        name: 'Apple Inc.',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#000000"><path d="M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z"/></svg>,
        company: 'Apple Inc.',
        sector: 'Technology',
        volume: 'Very High',
        marketCap: '$3.0T'
      },
      { 
        pair: 'TSLA', 
        name: 'Tesla Inc.',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#CC0000"><path d="M12 5.362L8.11 15h7.78L12 5.362zm0-3.362c.53 0 1.04.21 1.414.586L19.414 8.586c.375.375.586.884.586 1.414v8c0 1.104-.896 2-2 2H6c-1.104 0-2-.896-2-2v-8c0-.53.211-1.039.586-1.414L10.586 2.586C10.96 2.211 11.47 2 12 2z"/></svg>,
        company: 'Tesla Inc.',
        sector: 'Automotive',
        volume: 'Very High',
        marketCap: '$800B'
      },
      { 
        pair: 'GOOGL', 
        name: 'Alphabet Inc.',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24"><path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" fill="#4285F4"/><path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" fill="#34A853"/><path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" fill="#FBBC05"/><path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" fill="#EA4335"/></svg>,
        company: 'Alphabet Inc.',
        sector: 'Technology',
        volume: 'Very High',
        marketCap: '$1.7T'
      },
      { 
        pair: 'MSFT', 
        name: 'Microsoft Corp.',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#00BCF2"><path d="M11.4 24H0V12.6h11.4V24zM24 24H12.6V12.6H24V24zM11.4 11.4H0V0h11.4v11.4zm12.6 0H12.6V0H24v11.4z"/></svg>,
        company: 'Microsoft Corp.',
        sector: 'Technology',
        volume: 'Very High',
        marketCap: '$2.8T'
      },
      { 
        pair: 'AMZN', 
        name: 'Amazon.com Inc.',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#FF9900"><path d="M.045 18.02c9.783 0 17.466-1.73 23.955-5.19-2.317 1.794-6.8 3.194-14.044 3.194C3.8 15.977.917 14.135.045 12.78v5.24zm14.729-10.06c1.31-1.113 3.112-1.777 5.226-1.777 3.112 0 3.95 1.73 3.95 4.008v7.59c-1.31-.553-2.84-.92-4.593-.92-2.65 0-4.816 1.07-4.816 3.38 0 2.27 2.166 3.34 4.816 3.34 1.753 0 3.283-.367 4.593-.92v.46c0 .553-.437.99-.99.99H8.084c-.553 0-.99-.437-.99-.99V7.96h7.68zm-6.69 10.477c-1.707 0-3.112-.637-3.112-2.27 0-1.63 1.405-2.27 3.112-2.27s3.112.64 3.112 2.27c0 1.633-1.405 2.27-3.112 2.27z"/></svg>,
        company: 'Amazon.com Inc.',
        sector: 'E-commerce',
        volume: 'Very High',
        marketCap: '$1.4T'
      },
      { 
        pair: 'NVDA', 
        name: 'NVIDIA Corp.',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#76B900"><path d="M10.918 16.8c-2.667 0-4.918-2.009-4.918-4.8S8.251 7.2 10.918 7.2c2.012 0 3.735 1.115 4.555 2.769l2.527-1.538C16.8 6.277 14.035 4.8 10.918 4.8 6.692 4.8 3.2 8.477 3.2 12s3.492 7.2 7.718 7.2c3.117 0 5.882-1.477 7.082-3.631L15.473 14.031c-.82 1.654-2.543 2.769-4.555 2.769z"/></svg>,
        company: 'NVIDIA Corp.',
        sector: 'Technology',
        volume: 'Very High',
        marketCap: '$1.8T'
      },
      { 
        pair: 'META', 
        name: 'Meta Platforms Inc.',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#1877F2"><path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/></svg>,
        company: 'Meta Platforms Inc.',
        sector: 'Social Media',
        volume: 'Very High',
        marketCap: '$800B'
      },
      { 
        pair: 'NFLX', 
        name: 'Netflix Inc.',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#E50914"><path d="M5.398 0v.65l3.264 8.997v5.953h1.987V9.647L14.013.65V0H5.398zM0 0v15.6L0 24l2.248-2.745V0H0zm21.75 0v21.255L24 24V0h-2.25z"/></svg>,
        company: 'Netflix Inc.',
        sector: 'Entertainment',
        volume: 'High',
        marketCap: '$180B'
      },
      { 
        pair: 'AMD', 
        name: 'Advanced Micro Devices',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#ED1C24"><path d="M18.335 0H5.665C2.537 0 0 2.537 0 5.665v12.67C0 21.463 2.537 24 5.665 24h12.67C21.463 24 24 21.463 24 18.335V5.665C24 2.537 21.463 0 18.335 0zM12 18c-3.314 0-6-2.686-6-6s2.686-6 6-6 6 2.686 6 6-2.686 6-6 6z"/></svg>,
        company: 'Advanced Micro Devices',
        sector: 'Technology',
        volume: 'High',
        marketCap: '$230B'
      },
      { 
        pair: 'DIS', 
        name: 'The Walt Disney Company',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#006BB6"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1.5 14.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm3 0c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"/></svg>,
        company: 'The Walt Disney Company',
        sector: 'Entertainment',
        volume: 'High',
        marketCap: '$175B'
      },
      { 
        pair: 'BABA', 
        name: 'Alibaba Group',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#FF6900"><path d="M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10S2 17.514 2 12 6.486 2 12 2zm3.5 7h-7c-.83 0-1.5.67-1.5 1.5v3c0 .83.67 1.5 1.5 1.5h7c.83 0 1.5-.67 1.5-1.5v-3c0-.83-.67-1.5-1.5-1.5z"/></svg>,
        company: 'Alibaba Group',
        sector: 'E-commerce',
        volume: 'Medium',
        marketCap: '$200B'
      }
    ],
    commodities: [
      { 
        pair: 'XAUUSD', 
        name: 'Gold/US Dollar',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#FFD700"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.94-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2v1.93zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H8v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z"/></svg>,
        volume: 'Very High',
        spread: '$0.5'
      },
      { 
        pair: 'XBRUSD', 
        name: 'Brent Oil/US Dollar',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#2C3E50"><path d="M20 6h-2.18c.11-.31.18-.65.18-1a2.996 2.996 0 0 0-5.5-1.65l-.5.67-.5-.68C10.96 2.54 10.05 2 9 2 7.34 2 6 3.34 6 5c0 .35.07.69.18 1H4c-1.11 0-2 .89-2 2v1h20V8c0-1.11-.89-2-2-2zM2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2v-8H2v8z"/></svg>,
        volume: 'Very High',
        spread: '$0.08'
      },
      { 
        pair: 'XAGUSD', 
        name: 'Silver/US Dollar',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#C0C0C0"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.94-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2v1.93zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H8v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z"/></svg>,
        volume: 'High',
        spread: '$0.05'
      },
      { 
        pair: 'XTIUSD', 
        name: 'WTI Oil/US Dollar',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#1B1B1B"><path d="M20 6h-2.18c.11-.31.18-.65.18-1a2.996 2.996 0 0 0-5.5-1.65l-.5.67-.5-.68C10.96 2.54 10.05 2 9 2 7.34 2 6 3.34 6 5c0 .35.07.69.18 1H4c-1.11 0-2 .89-2 2v1h20V8c0-1.11-.89-2-2-2zM2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2v-8H2v8z"/></svg>,
        volume: 'Very High',
        spread: '$0.06'
      },
      { 
        pair: 'XPTUSD', 
        name: 'Platinum/US Dollar',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#E5E4E2"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.94-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2v1.93zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H8v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z"/></svg>,
        volume: 'Medium',
        spread: '$2.5'
      },
      { 
        pair: 'XPDUSD', 
        name: 'Palladium/US Dollar',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#CED0DD"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.94-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2v1.93zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H8v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z"/></svg>,
        volume: 'Low',
        spread: '$15'
      },
      { 
        pair: 'XNGUSD', 
        name: 'Natural Gas/US Dollar',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#4A90E2"><path d="M12 2l8 4.5v11L12 22l-8-4.5v-11L12 2z"/><path d="M8 10c2-2 6-2 8 0v4c-2 2-6 2-8 0v-4z" fill="white"/></svg>,
        volume: 'Medium',
        spread: '$0.03'
      },
      { 
        pair: 'XCUUSD', 
        name: 'Copper/US Dollar',
        icon: <svg className="w-6 h-6" viewBox="0 0 24 24" fill="#B87333"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.94-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2v1.93zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H8v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z"/></svg>,
        volume: 'Medium',
        spread: '$0.02'
      }
    ]
  };

  // Add search state for the modal
  const [searchTerm, setSearchTerm] = useState('');

  // Strategies array
  const strategies = [
    'Breakout',
    'Trend Following', 
    'Mean Reversion',
    'Scalping',
    'Swing Trading',
    'Day Trading',
    'Momentum',
    'Support/Resistance',
    'Custom Strategy'
  ];

  // Strategy management state
  const [savedStrategies, setSavedStrategies] = useState([]);
  const [newStrategyName, setNewStrategyName] = useState('');
  const [newStrategyDescription, setNewStrategyDescription] = useState('');
  const [showAddStrategyForm, setShowAddStrategyForm] = useState(false);

  // Default strategies
  const defaultStrategies = [
    { id: 1, name: 'Breakout', description: 'Trading breakouts from key levels', isDefault: true },
    { id: 2, name: 'Trend Following', description: 'Following the direction of the trend', isDefault: true },
    { id: 3, name: 'Mean Reversion', description: 'Trading reversals to the mean', isDefault: true },
    { id: 4, name: 'Scalping', description: 'Quick in-and-out trades for small profits', isDefault: true },
    { id: 5, name: 'Swing Trading', description: 'Holding positions for days to weeks', isDefault: true },
    { id: 6, name: 'Day Trading', description: 'Intraday trading with no overnight positions', isDefault: true },
    { id: 7, name: 'Momentum', description: 'Trading with strong price momentum', isDefault: true },
    { id: 8, name: 'Support/Resistance', description: 'Trading bounces from key levels', isDefault: true }
  ];

  // Database-based strategies state
  const [strategies, setStrategies] = useState([]);
  const [loadingStrategies, setLoadingStrategies] = useState(false);

  // Suggested tags
  const suggestedTags = [
    'scalping', 'swing-trade', 'day-trade', 'breakout', 'trend-following',
    'support-resistance', 'news-trade', 'technical-analysis', 'momentum',
    'reversal', 'continuation', 'pullback', 'bounce', 'channel'
  ];

  // Auto-detect trade direction based on prices
  const autoDetectTradeDirection = (entry, takeProfit, stopLoss) => {
    const entryPrice = parseFloat(entry);
    const tpPrice = parseFloat(takeProfit);
    const slPrice = parseFloat(stopLoss);

    if (entryPrice && tpPrice && slPrice) {
      if (tpPrice > entryPrice && slPrice < entryPrice) {
        return 'long';
      } else if (tpPrice < entryPrice && slPrice > entryPrice) {
        return 'short';
      }
    }
    return 'long'; // default
  };

  // Calculate trade results
  const calculateResults = (data) => {
    const entryPrice = parseFloat(data.entryPrice) || 0;
    const takeProfit = parseFloat(data.takeProfit) || 0;
    const stopLoss = parseFloat(data.stopLoss) || 0;
    const accountSize = parseFloat(data.accountSize) || currentAccount.balance || 0;
    const riskPercent = parseFloat(data.riskPerTrade) || 2;

    const riskAmount = (accountSize * riskPercent) / 100;
    
    // Calculate lot size (simplified - varies by instrument)
    const pipValue = 10; // Simplified pip value
    const stopLossPips = Math.abs(entryPrice - stopLoss) * 10000; // For forex
    const lotSize = stopLossPips > 0 ? riskAmount / (stopLossPips * pipValue) : 0;
    
    // Calculate potential profit/loss
    const profitPips = Math.abs(takeProfit - entryPrice) * 10000;
    const lossPips = Math.abs(entryPrice - stopLoss) * 10000;
    
    const potentialProfit = profitPips * pipValue * lotSize;
    const potentialLoss = riskAmount;
    
    const riskRewardRatio = potentialLoss > 0 ? potentialProfit / potentialLoss : 0;

    return {
      riskAmount: riskAmount,
      lotSize: parseFloat(lotSize.toFixed(2)),
      potentialProfit: potentialProfit,
      potentialLoss: potentialLoss,
      profitPips: parseFloat(profitPips.toFixed(1)),
      lossPips: parseFloat(lossPips.toFixed(1)),
      riskRewardRatio: parseFloat(riskRewardRatio.toFixed(2))
    };
  };

  // Handle form changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    const updatedData = { ...formData, [name]: value };
    
    // Auto-detect trade direction when prices change
    if (name === 'entryPrice' || name === 'takeProfit' || name === 'stopLoss') {
      updatedData.tradeDirection = autoDetectTradeDirection(
        name === 'entryPrice' ? value : formData.entryPrice,
        name === 'takeProfit' ? value : formData.takeProfit,
        name === 'stopLoss' ? value : formData.stopLoss
      );
    }
    
    // Set account size from selected account
    if (name === 'accountId') {
      const selectedAccount = accounts.find(acc => acc.id === parseInt(value));
      if (selectedAccount) {
        updatedData.accountSize = selectedAccount.balance;
      }
    }
    
    setFormData(updatedData);
    
    // Recalculate results
    const results = calculateResults(updatedData);
    setCalculatedResults(results);
  };

  const selectTradingPair = (pair) => {
    setFormData(prev => ({ ...prev, tradingPair: pair }));
    setShowTradingPairModal(false);
  };

  const selectStrategy = (strategy) => {
    const strategyName = typeof strategy === 'string' ? strategy : strategy.name;
    setFormData(prev => ({ ...prev, strategy: strategyName }));
    setShowStrategyModal(false);
  };

  const addTag = (tag) => {
    const currentTags = formData.tags ? formData.tags.split(',').map(t => t.trim()) : [];
    if (!currentTags.includes(tag)) {
      const newTags = [...currentTags, tag].join(', ');
      setFormData(prev => ({ ...prev, tags: newTags }));
    }
  };

  const clearForm = () => {
    setFormData({
      tradeType: 'long',
      accountId: null,
      accountSize: 0,
      riskPerTrade: '2',
      tradingPair: '',
      strategy: '',
      entryPrice: '',
      takeProfit: '',
      stopLoss: '',
      tradeDirection: 'long',
      tradeStatus: 'planning',
      quantity: '',
      notes: '',
      analysis: '',
      riskManagementLessons: '',
      tags: '',
      screenshot: null
    });
    setCalculatedResults({
      riskAmount: 0,
      lotSize: 0,
      potentialProfit: 0,
      potentialLoss: 0,
      profitPips: 0,
      lossPips: 0,
      riskRewardRatio: 0
    });
    setImagePreview(null);
  };

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      setFormData(prev => ({ ...prev, screenshot: file }));
      const reader = new FileReader();
      reader.onload = (e) => setImagePreview(e.target.result);
      reader.readAsDataURL(file);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      console.log('Trade data:', formData);
      console.log('Calculated results:', calculatedResults);
      
      // Clear form after successful submission
      clearForm();
      
      // Show success message or redirect
      router.push('/dashboard?success=trade-added');
    } catch (error) {
      console.error('Error saving trade:', error);
    } finally {
      setLoading(false);
    }
  };

  // Authentication
  useEffect(() => {
    const token = Cookies.get('auth-token') || localStorage.getItem('auth-token');
    const userData = localStorage.getItem('user');

    if (!token || !userData) {
      router.push('/login');
      return;
    }

    try {
      const parsedUser = JSON.parse(userData);
      setUser(parsedUser);
      // Load saved strategies after user is authenticated
      loadSavedStrategies();

      // Fetch strategies from database after user is authenticated
      fetchStrategiesFromDatabase();
    } catch (error) {
      console.error('Error parsing user data:', error);
      router.push('/login');
      return;
    }
  }, [router]);

  // Strategy Management Functions
  const loadSavedStrategies = () => {
    try {
      const saved = localStorage.getItem('trading-strategies');
      if (saved) {
        setSavedStrategies(JSON.parse(saved));
      }
    } catch (error) {
      console.error('Error loading strategies:', error);
    }
  };

  const saveStrategy = () => {
    if (!newStrategyName.trim()) return;
    
    const newStrategy = {
      id: Date.now(),
      name: newStrategyName.trim(),
      description: newStrategyDescription.trim(),
      isDefault: false,
      createdAt: new Date().toISOString()
    };

    const updatedStrategies = [...savedStrategies, newStrategy];
    setSavedStrategies(updatedStrategies);
    
    try {
      localStorage.setItem('trading-strategies', JSON.stringify(updatedStrategies));
    } catch (error) {
      console.error('Error saving strategy:', error);
    }

    setNewStrategyName('');
    setNewStrategyDescription('');
    setShowAddStrategyForm(false);
  };

  const deleteStrategy = (strategyId) => {
    const updatedStrategies = savedStrategies.filter(s => s.id !== strategyId);
    setSavedStrategies(updatedStrategies);
    
    try {
      localStorage.setItem('trading-strategies', JSON.stringify(updatedStrategies));
    } catch (error) {
      console.error('Error deleting strategy:', error);
    }
  };

  const getAllStrategies = () => {
    return [...defaultStrategies, ...savedStrategies];
  };

  // Database Strategy Functions
  const fetchStrategiesFromDatabase = async () => {
    setLoadingStrategies(true);
    try {
      // Simulate API call - replace with actual database call
      const response = await new Promise(resolve => {
        setTimeout(() => {
          resolve({
            success: true,
            data: [
              { id: 1, name: 'Breakout Trading', description: 'Trade breakouts from key support/resistance levels', category: 'Technical' },
              { id: 2, name: 'Trend Following', description: 'Follow the direction of the established trend', category: 'Technical' },
              { id: 3, name: 'Mean Reversion', description: 'Trade reversals when price moves too far from mean', category: 'Statistical' },
              { id: 4, name: 'Scalping', description: 'Quick trades for small profits with high frequency', category: 'Day Trading' },
              { id: 5, name: 'Swing Trading', description: 'Hold positions for several days to weeks', category: 'Position' },
              { id: 6, name: 'Day Trading', description: 'Open and close positions within the same day', category: 'Day Trading' },
              { id: 7, name: 'Momentum Trading', description: 'Trade in the direction of strong price momentum', category: 'Technical' },
              { id: 8, name: 'Support/Resistance', description: 'Trade bounces from key price levels', category: 'Technical' },
              { id: 9, name: 'Grid Trading', description: 'Place orders at regular intervals around current price', category: 'Algorithmic' },
              { id: 10, name: 'News Trading', description: 'Trade based on fundamental news events', category: 'Fundamental' },
              { id: 11, name: 'Arbitrage', description: 'Profit from price differences across markets', category: 'Quantitative' },
              { id: 12, name: 'Pair Trading', description: 'Long one asset, short another correlated asset', category: 'Quantitative' },
              { id: 13, name: 'Price Action', description: 'Trade based on pure price movement patterns', category: 'Technical' },
              { id: 14, name: 'Fibonacci Retracement', description: 'Use Fibonacci levels for entry and exit points', category: 'Technical' },
              { id: 15, name: 'Divergence Trading', description: 'Trade when price and indicators diverge', category: 'Technical' }
            ]
          });
        }, 1000); // Simulate network delay
      });

      if (response.success) {
        setStrategies(response.data);
      }
    } catch (error) {
      console.error('Error fetching strategies:', error);
      // Fallback to default strategies on error
      setStrategies([
        { id: 1, name: 'Breakout Trading', description: 'Trade breakouts from key levels', category: 'Technical' },
        { id: 2, name: 'Trend Following', description: 'Follow the trend direction', category: 'Technical' },
        { id: 3, name: 'Scalping', description: 'Quick trades for small profits', category: 'Day Trading' }
      ]);
    } finally {
      setLoadingStrategies(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex">
      {/* Shared Sidebar */}
      <Sidebar 
        user={user}
        currentAccountId={currentAccountId}
        accounts={accounts}
        alerts={alerts}
        onAccountSwitch={handleAccountSwitch}
        onAddAccount={handleAddAccount}
        onEditAccount={handleEditAccount}
        onDeleteAccount={handleDeleteAccount}
        onLogout={handleLogout}
      />

      {/* Main Content */}
      <div className="flex-1 flex flex-col ml-64">
        {/* Header */}
        <header className="bg-white border-b border-gray-100 px-8 py-6 sticky top-0 z-40">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="w-12 h-12 bg-gradient-to-r from-blue-600 to-blue-700 rounded-2xl flex items-center justify-center shadow-sm">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
              </div>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">Add Trade</h1>
                <p className="text-gray-500 text-sm">Record your trading activity</p>
              </div>
            </div>
            <div className="flex items-center space-x-3">
              <button 
                type="button"
                onClick={() => router.back()}
                className="px-5 py-2.5 text-gray-600 hover:text-gray-900 transition-colors font-medium text-sm flex items-center space-x-2 border border-gray-200 rounded-xl hover:bg-gray-50"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
                <span>Cancel</span>
              </button>
              <button 
                type="submit"
                form="trade-form"
                disabled={loading || !formData.tradingPair || !formData.entryPrice}
                className="px-6 py-2.5 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-xl hover:from-blue-700 hover:to-blue-800 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 font-medium text-sm shadow-sm flex items-center space-x-2"
              >
                {loading ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span>Saving...</span>
                  </>
                ) : (
                  <>
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                    <span>Save Trade</span>
                  </>
                )}
              </button>
            </div>
          </div>
        </header>

        {/* Main Form Content */}
        <main className="flex-1 p-8 overflow-y-auto bg-gray-50">
          <form id="trade-form" onSubmit={handleSubmit} className="max-w-6xl mx-auto space-y-8">
            
            {/* Trading Setup Card */}
            <div className="bg-white rounded-2xl border border-gray-100 shadow-sm overflow-hidden">
              <div className="p-6 border-b border-gray-100 bg-gradient-to-r from-blue-50 to-indigo-50">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-white rounded-xl flex items-center justify-center shadow-sm">
                    <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-xl font-bold text-gray-900">Trading Setup</h3>
                    <p className="text-sm text-gray-600">Configure your trade parameters</p>
                  </div>
                </div>
              </div>
              
              <div className="p-8">
                {/* Trading Pair and Strategy Row */}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
                  {/* Trading Pair */}
                  <div className="space-y-3">
                    <label className="block text-sm font-bold text-gray-700">Trading Pair</label>
                    <button
                      type="button"
                      onClick={() => setShowTradingPairModal(true)}
                      className="w-full p-5 bg-gray-50 hover:bg-gray-100 border border-gray-200 hover:border-blue-300 rounded-2xl text-left transition-all duration-200 group"
                    >
                      {formData.tradingPair ? (
                        <div className="flex items-center space-x-4">
                          <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-blue-600 rounded-xl flex items-center justify-center shadow-sm">
                            <span className="text-white text-sm font-bold">{formData.tradingPair.split('/')[0] || formData.tradingPair.substring(0, 3)}</span>
                          </div>
                          <div className="flex-1">
                            <p className="font-bold text-gray-900 text-lg">{formData.tradingPair}</p>
                            <p className="text-sm text-gray-500 font-medium">Click to change pair</p>
                          </div>
                          <svg className="w-5 h-5 text-gray-400 group-hover:text-blue-600 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      ) : (
                        <div className="flex items-center space-x-4">
                          <div className="w-12 h-12 bg-gray-200 rounded-xl flex items-center justify-center">
                            <svg className="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                            </svg>
                          </div>
                          <div className="flex-1">
                            <p className="font-bold text-gray-500 text-lg">Select Trading Pair</p>
                            <p className="text-sm text-gray-400 font-medium">Choose from Forex, Crypto, Stocks</p>
                          </div>
                          <svg className="w-5 h-5 text-gray-400 group-hover:text-blue-600 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      )}
                    </button>
                  </div>

                  {/* Trading Strategy */}
                  <div className="space-y-3">
                    <label className="block text-sm font-bold text-gray-700">Strategy</label>
                    <button
                      type="button"
                      onClick={() => setShowStrategyModal(true)}
                      className="w-full p-5 bg-gray-50 hover:bg-gray-100 border border-gray-200 hover:border-purple-300 rounded-2xl text-left transition-all duration-200 group"
                    >
                      {formData.strategy ? (
                        <div className="flex items-center space-x-4">
                          <div className="w-12 h-12 bg-gradient-to-r from-purple-500 to-purple-600 rounded-xl flex items-center justify-center shadow-sm">
                            <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                            </svg>
                          </div>
                          <div className="flex-1">
                            <p className="font-bold text-gray-900 text-lg">{formData.strategy}</p>
                            <p className="text-sm text-gray-500 font-medium">Click to change strategy</p>
                          </div>
                          <svg className="w-5 h-5 text-gray-400 group-hover:text-purple-600 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      ) : (
                        <div className="flex items-center space-x-4">
                          <div className="w-12 h-12 bg-gray-200 rounded-xl flex items-center justify-center">
                            <svg className="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                            </svg>
                          </div>
                          <div className="flex-1">
                            <p className="font-bold text-gray-500 text-lg">Select Strategy</p>
                            <p className="text-sm text-gray-400 font-medium">Choose your trading strategy</p>
                          </div>
                          <svg className="w-5 h-5 text-gray-400 group-hover:text-purple-600 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      )}
                    </button>
                  </div>
                </div>

                {/* Account, Risk, Status Row */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  {/* Account Selection */}
                  <div className="space-y-3">
                    <label className="block text-sm font-bold text-gray-700 flex items-center">
                      <svg className="w-4 h-4 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z" />
                      </svg>
                      Account
                    </label>
                    <div className="relative">
                      <select
                        name="accountId"
                        value={formData.accountId || ''}
                        onChange={handleChange}
                        className="w-full px-4 py-4 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all appearance-none font-semibold text-gray-900"
                      >
                        <option value="">Choose Account</option>
                        {accounts.map((account) => (
                          <option key={account.id} value={account.id}>
                            {account.name} - ${Number(account.balance || 0).toLocaleString()}
                          </option>
                        ))}
                      </select>
                      <svg className="absolute right-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400 pointer-events-none" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                      </svg>
                    </div>
                    {formData.accountSize > 0 && (
                      <p className="text-sm text-gray-600 font-semibold bg-green-50 px-3 py-2 rounded-lg">
                        Balance: <span className="text-green-700">${Number(formData.accountSize).toLocaleString()}</span>
                      </p>
                    )}
                  </div>

                  {/* Risk Per Trade */}
                  <div className="space-y-3">
                    <label className="block text-sm font-bold text-gray-700 flex items-center">
                      <svg className="w-4 h-4 mr-2 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                      </svg>
                      Risk Per Trade
                    </label>
                    <div className="relative">
                      <input
                        type="number"
                        name="riskPerTrade"
                        value={formData.riskPerTrade}
                        onChange={handleChange}
                        step="0.1"
                        min="0.1"
                        max="10"
                        placeholder="2.0"
                        className="w-full px-4 py-4 pr-10 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all font-semibold text-gray-900"
                      />
                      <span className="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-500 font-bold">%</span>
                    </div>
                  </div>

                  {/* Trade Status */}
                  <div className="space-y-3">
                    <label className="block text-sm font-bold text-gray-700 flex items-center">
                      <svg className="w-4 h-4 mr-2 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      Status
                    </label>
                    <div className="flex space-x-3">
                      <button
                        type="button"
                        onClick={() => setFormData(prev => ({ ...prev, tradeStatus: 'planning' }))}
                        className={`flex-1 flex items-center justify-center px-4 py-4 rounded-xl border-2 transition-all font-bold text-sm ${
                          formData.tradeStatus === 'planning'
                            ? 'bg-blue-50 border-blue-300 text-blue-700 shadow-md'
                            : 'bg-gray-50 border-gray-200 text-gray-600 hover:bg-gray-100'
                        }`}
                      >
                        <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                        </svg>
                        Planning
                      </button>
                      <button
                        type="button"
                        onClick={() => setFormData(prev => ({ ...prev, tradeStatus: 'open' }))}
                        className={`flex-1 flex items-center justify-center px-4 py-4 rounded-xl border-2 transition-all font-bold text-sm ${
                          formData.tradeStatus === 'open'
                            ? 'bg-green-50 border-green-300 text-green-700 shadow-md'
                            : 'bg-gray-50 border-gray-200 text-gray-600 hover:bg-gray-100'
                        }`}
                      >
                        <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                        </svg>
                        Live
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Price Levels Card */}
            <div className="bg-white rounded-2xl border border-gray-100 shadow-sm overflow-hidden">
              <div className="p-6 border-b border-gray-100 bg-gradient-to-r from-green-50 to-emerald-50">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-white rounded-xl flex items-center justify-center shadow-sm">
                    <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-xl font-bold text-gray-900">Price Levels</h3>
                    <p className="text-sm text-gray-600">Set your entry, take profit, and stop loss</p>
                  </div>
                </div>
              </div>
              
              <div className="p-8">
                <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                  {/* Entry Price */}
                  <div className="space-y-3">
                    <label className="block text-sm font-bold text-gray-700 flex items-center">
                      <svg className="w-4 h-4 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 8l4 4m0 0l-4 4m4-4H3" />
                      </svg>
                      Entry Price
                    </label>
                    <input
                      type="number"
                      name="entryPrice"
                      value={formData.entryPrice}
                      onChange={handleChange}
                      step="0.00001"
                      placeholder="1.2500"
                      className="w-full px-4 py-4 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all font-semibold text-gray-900"
                    />
                  </div>

                  {/* Take Profit */}
                  <div className="space-y-3">
                    <label className="block text-sm font-bold text-gray-700 flex items-center">
                      <svg className="w-4 h-4 mr-2 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 11l5-5m0 0l5 5m-5-5v12" />
                      </svg>
                      Take Profit
                    </label>
                    <input
                      type="number"
                      name="takeProfit"
                      value={formData.takeProfit}
                      onChange={handleChange}
                      step="0.00001"
                      placeholder="1.2600"
                      className="w-full px-4 py-4 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-all font-semibold text-gray-900"
                    />
                  </div>

                  {/* Stop Loss */}
                  <div className="space-y-3">
                    <label className="block text-sm font-bold text-gray-700 flex items-center">
                      <svg className="w-4 h-4 mr-2 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 13l-5 5m0 0l-5-5m5 5V6" />
                      </svg>
                      Stop Loss
                    </label>
                    <input
                      type="number"
                      name="stopLoss"
                      value={formData.stopLoss}
                      onChange={handleChange}
                      step="0.00001"
                      placeholder="1.2400"
                      className="w-full px-4 py-4 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-all font-semibold text-gray-900"
                    />
                  </div>

                  {/* Trade Direction - Auto-detected */}
                  <div className="space-y-3">
                    <label className="block text-sm font-bold text-gray-700 flex items-center">
                      <svg className="w-4 h-4 mr-2 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                      </svg>
                      Direction
                    </label>
                    <div className="flex space-x-2">
                      <button
                        type="button"
                        onClick={() => setFormData(prev => ({ ...prev, tradeDirection: 'long' }))}
                        className={`flex-1 flex items-center justify-center px-3 py-4 rounded-xl border-2 transition-all font-bold text-sm ${
                          formData.tradeDirection === 'long'
                            ? 'bg-green-50 border-green-300 text-green-700 shadow-md'
                            : 'bg-gray-50 border-gray-200 text-gray-600 hover:bg-gray-100'
                        }`}
                      >
                        <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                        </svg>
                        Long
                      </button>
                      <button
                        type="button"
                        onClick={() => setFormData(prev => ({ ...prev, tradeDirection: 'short' }))}
                        className={`flex-1 flex items-center justify-center px-3 py-4 rounded-xl border-2 transition-all font-bold text-sm ${
                          formData.tradeDirection === 'short'
                            ? 'bg-red-50 border-red-300 text-red-700 shadow-md'
                            : 'bg-gray-50 border-gray-200 text-gray-600 hover:bg-gray-100'
                        }`}
                      >
                        <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 14l-7 7m0 0l-7-7m7 7V3" />
                        </svg>
                        Short
                      </button>
                    </div>
                    {formData.entryPrice && formData.takeProfit && formData.stopLoss && (
                      <p className="text-xs text-blue-600 font-semibold bg-blue-50 px-2 py-1 rounded-lg">
                        Auto-detected: {autoDetectTradeDirection(formData.entryPrice, formData.takeProfit, formData.stopLoss).toUpperCase()}
                      </p>
                    )}
                  </div>
                </div>
              </div>
            </div>

            {/* Auto-calculated Results */}
            <div className="bg-gradient-to-r from-purple-50 to-indigo-50 rounded-2xl border border-purple-100 shadow-sm overflow-hidden">
              <div className="p-6 border-b border-purple-100">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-white rounded-xl flex items-center justify-center shadow-sm">
                    <svg className="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 7h6m0 10v-3m-3 3h.01M9 16h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v14a2 2 0 002 2z" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-xl font-bold text-gray-900">Auto-calculated Results</h3>
                    <p className="text-sm text-gray-600">Risk management and profit/loss calculations</p>
                  </div>
                </div>
              </div>
              
              <div className="p-8">
                <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-4">
                  <div className="bg-white p-5 rounded-xl border border-gray-100 shadow-sm">
                    <div className="flex items-center space-x-2 mb-2">
                      <svg className="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
                      </svg>
                      <p className="text-xs font-bold text-gray-600 uppercase tracking-wide">Risk Amount</p>
                    </div>
                    <p className="text-xl font-bold text-gray-900">${calculatedResults.riskAmount}</p>
                  </div>
                  
                  <div className="bg-white p-5 rounded-xl border border-gray-100 shadow-sm">
                    <div className="flex items-center space-x-2 mb-2">
                      <svg className="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                      </svg>
                      <p className="text-xs font-bold text-gray-600 uppercase tracking-wide">Lot Size</p>
                    </div>
                    <p className="text-xl font-bold text-gray-900">{calculatedResults.lotSize}</p>
                  </div>
                  
                  <div className="bg-white p-5 rounded-xl border border-green-100 shadow-sm">
                    <div className="flex items-center space-x-2 mb-2">
                      <svg className="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 11l5-5m0 0l5 5m-5-5v12" />
                      </svg>
                      <p className="text-xs font-bold text-green-600 uppercase tracking-wide">Potential Profit</p>
                    </div>
                    <p className="text-xl font-bold text-green-700">${calculatedResults.potentialProfit}</p>
                  </div>
                  
                  <div className="bg-white p-5 rounded-xl border border-red-100 shadow-sm">
                    <div className="flex items-center space-x-2 mb-2">
                      <svg className="w-4 h-4 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 13l-5 5m0 0l-5-5m5 5V6" />
                      </svg>
                      <p className="text-xs font-bold text-red-600 uppercase tracking-wide">Potential Loss</p>
                    </div>
                    <p className="text-xl font-bold text-red-700">${calculatedResults.potentialLoss}</p>
                  </div>
                  
                  <div className="bg-white p-5 rounded-xl border border-blue-100 shadow-sm">
                    <div className="flex items-center space-x-2 mb-2">
                      <svg className="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                      </svg>
                      <p className="text-xs font-bold text-blue-600 uppercase tracking-wide">Profit Pips</p>
                    </div>
                    <p className="text-xl font-bold text-blue-700">{calculatedResults.profitPips}</p>
                  </div>
                  
                  <div className="bg-white p-5 rounded-xl border border-orange-100 shadow-sm">
                    <div className="flex items-center space-x-2 mb-2">
                      <svg className="w-4 h-4 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 14l-7 7m0 0l-7-7m7 7V3" />
                      </svg>
                      <p className="text-xs font-bold text-orange-600 uppercase tracking-wide">Loss Pips</p>
                    </div>
                    <p className="text-xl font-bold text-orange-700">{calculatedResults.lossPips}</p>
                  </div>
                  
                  <div className="bg-white p-5 rounded-xl border border-purple-100 shadow-sm">
                    <div className="flex items-center space-x-2 mb-2">
                      <svg className="w-4 h-4 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                      </svg>
                      <p className="text-xs font-bold text-purple-600 uppercase tracking-wide">Risk:Reward</p>
                    </div>
                    <p className="text-xl font-bold text-purple-700">1:{calculatedResults.riskRewardRatio}</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Trade Screenshot Upload Card */}
            <div className="bg-white rounded-2xl border border-gray-100 shadow-sm overflow-hidden">
              <div className="p-6 border-b border-gray-100 bg-gradient-to-r from-indigo-50 to-purple-50">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-white rounded-xl flex items-center justify-center shadow-sm">
                    <svg className="w-5 h-5 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h14a2 2 0 002-2V5a2 2 0 00-2-2H6a2 2 0 00-2 2v14a2 2 0 002 2z" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-xl font-bold text-gray-900">Trade Screenshot</h3>
                    <p className="text-sm text-gray-600">Upload your chart analysis or trade setup</p>
                  </div>
                </div>
              </div>
              
              <div className="p-8">
                <div className="border-2 border-dashed border-gray-300 rounded-2xl p-8 text-center hover:border-indigo-400 hover:bg-indigo-25 transition-all duration-200 group">
                  <input
                    type="file"
                    accept="image/*"
                    onChange={handleImageUpload}
                    className="hidden"
                    id="screenshot-upload"
                  />
                  <label htmlFor="screenshot-upload" className="cursor-pointer">
                    {imagePreview ? (
                      <div className="space-y-4">
                        <img src={imagePreview} alt="Trade screenshot" className="max-w-full h-48 object-cover rounded-xl mx-auto shadow-md" />
                        <div className="flex items-center justify-center space-x-2 text-indigo-600 font-semibold">
                          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                          </svg>
                          <span>Click to change screenshot</span>
                        </div>
                      </div>
                    ) : (
                      <div className="space-y-4">
                        <div className="w-16 h-16 bg-indigo-100 rounded-2xl flex items-center justify-center mx-auto group-hover:bg-indigo-200 transition-colors">
                          <svg className="w-8 h-8 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h14a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                          </svg>
                        </div>
                        <div>
                          <p className="text-xl font-bold text-gray-900 mb-2">Upload Trade Screenshot</p>
                          <p className="text-sm text-gray-500 mb-4">PNG, JPG, GIF up to 10MB</p>
                          <div className="inline-flex items-center px-6 py-3 bg-indigo-600 text-white rounded-xl font-semibold hover:bg-indigo-700 transition-colors">
                            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                            </svg>
                            Choose File
                          </div>
                        </div>
                      </div>
                    )}
                  </label>
                </div>
              </div>
            </div>

            {/* Trade Analysis & Notes Card */}
            <div className="bg-white rounded-2xl border border-gray-100 shadow-sm overflow-hidden">
              <div className="p-6 border-b border-gray-100 bg-gradient-to-r from-emerald-50 to-teal-50">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-white rounded-xl flex items-center justify-center shadow-sm">
                    <svg className="w-5 h-5 text-emerald-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-xl font-bold text-gray-900">Trade Analysis & Notes</h3>
                    <p className="text-sm text-gray-600">Document your trade reasoning and lessons learned</p>
                  </div>
                </div>
              </div>
              
              <div className="p-8 space-y-8">
                <div>
                  <label className="block text-sm font-bold text-gray-700 mb-3 flex items-center">
                    <svg className="w-4 h-4 mr-2 text-emerald-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 7l2 2 4-4" />
                    </svg>
                    Comprehensive Trade Analysis
                  </label>
                  <textarea
                    name="analysis"
                    value={formData.analysis}
                    onChange={handleChange}
                    rows={6}
                    placeholder="Enter your comprehensive trade analysis here...

Suggested points:
• Market conditions and setup
• Technical indicators used
• Fundamental analysis (if applicable)
• Entry plan and reasoning
• Exit strategy"
                    className="w-full px-4 py-4 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-all resize-none font-medium text-gray-900 placeholder-gray-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-bold text-gray-700 mb-3 flex items-center">
                    <svg className="w-4 h-4 mr-2 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                    </svg>
                    Risk Management & Lessons Learned
                  </label>
                  <textarea
                    name="riskManagementLessons"
                    value={formData.riskManagementLessons}
                    onChange={handleChange}
                    rows={4}
                    placeholder="Document risk management decisions and lessons learned...

• Position sizing rationale
• Risk management rules applied
• What worked well?
• What could be improved?
• Key takeaways for future trades"
                    className="w-full px-4 py-4 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all resize-none font-medium text-gray-900 placeholder-gray-500"
                  />
                </div>
              </div>
            </div>

            {/* Tags Section Card */}
            <div className="bg-white rounded-2xl border border-gray-100 shadow-sm overflow-hidden">
              <div className="p-6 border-b border-gray-100 bg-gradient-to-r from-amber-50 to-orange-50">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-white rounded-xl flex items-center justify-center shadow-sm">
                    <svg className="w-5 h-5 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-xl font-bold text-gray-900">Tags</h3>
                    <p className="text-sm text-gray-600">Categorize your trade for easy filtering and analysis</p>
                  </div>
                </div>
              </div>
              
              <div className="p-8 space-y-6">
                <div>
                  <label className="block text-sm font-bold text-gray-700 mb-3 flex items-center">
                    <svg className="w-4 h-4 mr-2 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                    </svg>
                    Add Tags (comma-separated)
                  </label>
                  <input
                    type="text"
                    name="tags"
                    value={formData.tags}
                    onChange={handleChange}
                    placeholder="e.g., scalping, breakout, trend-following"
                    className="w-full px-4 py-4 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-amber-500 focus:border-amber-500 transition-all font-medium text-gray-900"
                  />
                </div>
                
                <div>
                  <p className="text-sm font-bold text-gray-700 mb-4 flex items-center">
                    <svg className="w-4 h-4 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    Suggested Tags:
                  </p>
                  <div className="flex flex-wrap gap-2">
                    {suggestedTags.map((tag) => (
                      <button
                        key={tag}
                        type="button"
                        onClick={() => addTag(tag)}
                        className="px-4 py-2 text-sm bg-gray-100 text-gray-700 rounded-xl hover:bg-amber-100 hover:text-amber-700 hover:border-amber-300 border border-gray-200 transition-all font-medium shadow-sm hover:shadow-md"
                      >
                        #{tag}
                      </button>
                    ))}
                  </div>
                </div>
                
                {formData.tags && (
                  <div>
                    <p className="text-sm font-bold text-gray-700 mb-3 flex items-center">
                      <svg className="w-4 h-4 mr-2 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      Current Tags:
                    </p>
                    <div className="flex flex-wrap gap-2">
                      {formData.tags.split(',').map((tag, index) => (
                        tag.trim() && (
                          <span
                            key={index}
                            className="px-4 py-2 text-sm bg-blue-100 text-blue-700 rounded-xl border border-blue-200 font-medium shadow-sm"
                          >
                            #{tag.trim()}
                          </span>
                        )
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Action Buttons */}
            <div className="flex flex-col sm:flex-row gap-4 pt-6">
              <button
                type="button"
                onClick={() => router.push('/dashboard')}
                className="flex-1 px-8 py-4 border-2 border-gray-200 text-gray-700 rounded-2xl hover:bg-gray-50 transition-all font-bold text-sm flex items-center justify-center shadow-sm"
              >
                <svg className="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
                Cancel & Exit
              </button>
              
              <button
                type="button"
                onClick={clearForm}
                className="flex-1 px-8 py-4 border-2 border-orange-200 text-orange-700 rounded-2xl hover:bg-orange-50 transition-all font-bold text-sm flex items-center justify-center shadow-sm"
              >
                <svg className="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                Clear Form
              </button>
              
              <button
                type="submit"
                disabled={loading || !formData.tradingPair || !formData.entryPrice}
                className="flex-1 px-8 py-4 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-2xl hover:from-blue-700 hover:to-blue-800 disabled:opacity-50 disabled:cursor-not-allowed transition-all font-bold text-sm flex items-center justify-center shadow-lg"
              >
                {loading ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Saving Trade...
                  </>
                ) : (
                  <>
                    <svg className="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                    </svg>
                    Add Trade to Journal
                  </>
                )}
              </button>
            </div>
          </form>
        </main>
      </div>

      {/* Trading Pairs Modal - Modern Redesign */}
      {showTradingPairModal && (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4 animate-in fade-in duration-300">
          <div className="bg-white rounded-3xl w-full max-w-7xl max-h-[90vh] overflow-hidden shadow-2xl border border-gray-100 animate-in slide-in-from-bottom-4 duration-500">
            {/* Modern Header */}
            <div className="relative p-8 bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 border-b border-gray-100">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <div className="w-16 h-16 bg-white rounded-2xl flex items-center justify-center shadow-lg border border-gray-100">
                    <svg className="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-3xl font-bold text-gray-900 mb-1">Select Trading Pair</h3>
                    <p className="text-gray-600 text-lg">Choose from our extensive selection of financial instruments</p>
                  </div>
                </div>
                <button
                  onClick={() => setShowTradingPairModal(false)}
                  className="p-3 text-gray-400 hover:text-gray-600 hover:bg-white rounded-2xl transition-all duration-200 shadow-md hover:shadow-lg"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>

              {/* Modern Search Bar */}
              <div className="mt-6 relative">
                <div className="relative">
                  <svg className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                  </svg>
                  <input
                    type="text"
                    placeholder="Search trading pairs... (e.g., EUR/USD, Bitcoin, Apple)"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full pl-12 pr-4 py-4 bg-white border border-gray-200 rounded-2xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all font-medium text-gray-900 placeholder-gray-500 shadow-sm"
                  />
                  {searchTerm && (
                    <button
                      onClick={() => setSearchTerm('')}
                      className="absolute right-4 top-1/2 transform -translate-y-1/2 p-1 text-gray-400 hover:text-gray-600 rounded-full transition-colors"
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>
                  )}
                </div>
              </div>
            </div>
            
            {/* Content Area */}
            <div className="p-8 overflow-y-auto max-h-[70vh] bg-gray-50">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                
                {/* Forex Pairs - Modern Cards */}
                <div className="space-y-6">
                  <div className="flex items-center space-x-3 mb-6">
                    <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg">
                      <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
                      </svg>
                    </div>
                    <div>
                      <h4 className="text-2xl font-bold text-gray-900">Forex</h4>
                      <p className="text-gray-600">Major currency pairs with tight spreads</p>
                    </div>
                  </div>
                  
                  <div className="space-y-3">
                    {tradingPairs.forex
                      .filter(pair => !searchTerm || pair.pair.toLowerCase().includes(searchTerm.toLowerCase()) || pair.name.toLowerCase().includes(searchTerm.toLowerCase()))
                      .map((pair) => (
                      <button
                        key={pair.pair}
                        onClick={() => selectTradingPair(pair.pair)}
                        className="w-full p-5 bg-white border border-gray-200 rounded-2xl hover:border-blue-300 hover:shadow-lg transition-all duration-300 group hover:bg-blue-50"
                      >
                        <div className="flex items-center space-x-4">
                          <div className="flex items-center space-x-2">
                            <div className="group-hover:scale-110 transition-transform">
                              {pair.flag1}
                            </div>
                            <div className="w-6 h-0.5 bg-gray-300 rounded-full"></div>
                            <div className="group-hover:scale-110 transition-transform">
                              {pair.flag2}
                            </div>
                          </div>
                          <div className="flex-1 text-left">
                            <p className="font-bold text-gray-900 group-hover:text-blue-700 text-lg transition-colors">{pair.pair}</p>
                            <p className="text-sm text-gray-500 group-hover:text-blue-600 transition-colors">{pair.name}</p>
                          </div>
                          <div className="text-right space-y-1">
                            <div className="flex items-center space-x-2">
                              <span className={`inline-flex px-2 py-1 rounded-lg text-xs font-bold ${
                                pair.volume === 'Very High' ? 'bg-green-100 text-green-700' :
                                pair.volume === 'High' ? 'bg-blue-100 text-blue-700' :
                                'bg-yellow-100 text-yellow-700'
                              }`}>
                                {pair.volume}
                              </span>
                            </div>
                            <p className="text-xs text-gray-500 font-semibold">Spread: {pair.spread}</p>
                          </div>
                          <svg className="w-5 h-5 text-gray-400 group-hover:text-blue-600 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      </button>
                    ))}
                  </div>
                </div>

                {/* Cryptocurrency */}
                <div className="space-y-6">
                  <div className="flex items-center space-x-3 mb-6">
                    <div className="w-12 h-12 bg-gradient-to-br from-orange-500 to-orange-600 rounded-2xl flex items-center justify-center shadow-lg">
                      <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                      </svg>
                    </div>
                    <div>
                      <h4 className="text-2xl font-bold text-gray-900">Cryptocurrency</h4>
                      <p className="text-gray-600">Digital assets with 24/7 trading</p>
                    </div>
                  </div>
                  
                  <div className="space-y-3">
                    {tradingPairs.crypto
                      .filter(pair => !searchTerm || pair.pair.toLowerCase().includes(searchTerm.toLowerCase()) || pair.name.toLowerCase().includes(searchTerm.toLowerCase()))
                      .map((pair) => (
                      <button
                        key={pair.pair}
                        onClick={() => selectTradingPair(pair.pair)}
                        className="w-full p-5 bg-white border border-gray-200 rounded-2xl hover:border-orange-300 hover:shadow-lg transition-all duration-300 group hover:bg-orange-50"
                      >
                        <div className="flex items-center space-x-4">
                          <div className="group-hover:scale-110 transition-transform w-8 h-8">
                            {pair.icon}
                          </div>
                          <div className="flex-1 text-left">
                            <p className="font-bold text-gray-900 group-hover:text-orange-700 text-lg transition-colors">{pair.pair}</p>
                            <p className="text-sm text-gray-500 group-hover:text-orange-600 transition-colors">{pair.name}</p>
                          </div>
                          <div className="text-right space-y-1">
                            <div className="flex items-center space-x-2">
                              <span className={`inline-flex px-2 py-1 rounded-lg text-xs font-bold ${
                                pair.volume === 'Very High' ? 'bg-green-100 text-green-700' :
                                pair.volume === 'High' ? 'bg-blue-100 text-blue-700' :
                                'bg-yellow-100 text-yellow-700'
                              }`}>
                                {pair.volume}
                              </span>
                            </div>
                            <p className="text-xs text-gray-500 font-semibold">Spread: {pair.spread}</p>
                          </div>
                          <svg className="w-5 h-5 text-gray-400 group-hover:text-orange-600 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      </button>
                    ))}
                  </div>
                </div>

                {/* Stocks */}
                <div className="space-y-6">
                  <div className="flex items-center space-x-3 mb-6">
                    <div className="w-12 h-12 bg-gradient-to-br from-green-500 to-green-600 rounded-2xl flex items-center justify-center shadow-lg">
                      <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                      </svg>
                    </div>
                    <div>
                      <h4 className="text-2xl font-bold text-gray-900">Stocks</h4>
                      <p className="text-gray-600">Leading companies and ETFs</p>
                    </div>
                  </div>
                  
                  <div className="space-y-3">
                    {tradingPairs.stocks
                      .filter(pair => !searchTerm || pair.pair.toLowerCase().includes(searchTerm.toLowerCase()) || pair.name.toLowerCase().includes(searchTerm.toLowerCase()) || pair.company?.toLowerCase().includes(searchTerm.toLowerCase()))
                      .map((pair) => (
                      <button
                        key={pair.pair}
                        onClick={() => selectTradingPair(pair.pair)}
                        className="w-full p-5 bg-white border border-gray-200 rounded-2xl hover:border-green-300 hover:shadow-lg transition-all duration-300 group hover:bg-green-50"
                      >
                        <div className="flex items-center space-x-4">
                          <div className="w-12 h-12 bg-gray-50 rounded-2xl flex items-center justify-center shadow-sm border border-gray-100 group-hover:bg-white transition-colors">
                            <div className="group-hover:scale-110 transition-transform">
                              {pair.icon}
                            </div>
                          </div>
                          <div className="flex-1 text-left">
                            <p className="font-bold text-gray-900 group-hover:text-green-700 text-lg transition-colors">{pair.pair}</p>
                            <p className="text-sm text-gray-500 group-hover:text-green-600 transition-colors">{pair.company}</p>
                            <p className="text-xs text-gray-400 font-semibold">{pair.sector}</p>
                          </div>
                          <div className="text-right space-y-1">
                            <div className="flex items-center space-x-2">
                              <span className={`inline-flex px-2 py-1 rounded-lg text-xs font-bold ${
                                pair.volume === 'Very High' ? 'bg-green-100 text-green-700' :
                                pair.volume === 'High' ? 'bg-blue-100 text-blue-700' :
                                'bg-yellow-100 text-yellow-700'
                              }`}>
                                {pair.volume}
                              </span>
                            </div>
                            <p className="text-xs text-gray-500 font-semibold">{pair.marketCap}</p>
                          </div>
                          <svg className="w-5 h-5 text-gray-400 group-hover:text-green-600 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      </button>
                    ))}
                  </div>
                </div>

                {/* Commodities */}
                <div className="space-y-6">
                  <div className="flex items-center space-x-3 mb-6">
                    <div className="w-12 h-12 bg-gradient-to-br from-yellow-500 to-yellow-600 rounded-2xl flex items-center justify-center shadow-lg">
                      <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                      </svg>
                    </div>
                    <div>
                      <h4 className="text-2xl font-bold text-gray-900">Commodities</h4>
                      <p className="text-gray-600">Precious metals and energy futures</p>
                    </div>
                  </div>
                  
                  <div className="space-y-3">
                    {tradingPairs.commodities
                      .filter(pair => !searchTerm || pair.pair.toLowerCase().includes(searchTerm.toLowerCase()) || pair.name.toLowerCase().includes(searchTerm.toLowerCase()))
                      .map((pair) => (
                      <button
                        key={pair.pair}
                        onClick={() => selectTradingPair(pair.pair)}
                        className="w-full p-5 bg-white border border-gray-200 rounded-2xl hover:border-yellow-300 hover:shadow-lg transition-all duration-300 group hover:bg-yellow-50"
                      >
                        <div className="flex items-center space-x-4">
                          <div className="w-12 h-12 bg-gray-50 rounded-2xl flex items-center justify-center shadow-sm border border-gray-100 group-hover:bg-white transition-colors">
                            <div className="group-hover:scale-110 transition-transform">
                              {pair.icon}
                            </div>
                          </div>
                          <div className="flex-1 text-left">
                            <p className="font-bold text-gray-900 group-hover:text-yellow-700 text-lg transition-colors">{pair.pair}</p>
                            <p className="text-sm text-gray-500 group-hover:text-yellow-600 transition-colors">{pair.name}</p>
                          </div>
                          <div className="text-right space-y-1">
                            <div className="flex items-center space-x-2">
                              <span className={`inline-flex px-2 py-1 rounded-lg text-xs font-bold ${
                                pair.volume === 'Very High' ? 'bg-green-100 text-green-700' :
                                pair.volume === 'High' ? 'bg-blue-100 text-blue-700' :
                                'bg-yellow-100 text-yellow-700'
                              }`}>
                                {pair.volume}
                              </span>
                            </div>
                            <p className="text-xs text-gray-500 font-semibold">Spread: {pair.spread}</p>
                          </div>
                          <svg className="w-5 h-5 text-gray-400 group-hover:text-yellow-600 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      </button>
                    ))}
                  </div>
                </div>
              </div>

              {/* No Results */}
              {searchTerm && [
                ...tradingPairs.forex.filter(pair => pair.pair.toLowerCase().includes(searchTerm.toLowerCase()) || pair.name.toLowerCase().includes(searchTerm.toLowerCase())),
                ...tradingPairs.crypto.filter(pair => pair.pair.toLowerCase().includes(searchTerm.toLowerCase()) || pair.name.toLowerCase().includes(searchTerm.toLowerCase())),
                ...tradingPairs.stocks.filter(pair => pair.pair.toLowerCase().includes(searchTerm.toLowerCase()) || pair.name.toLowerCase().includes(searchTerm.toLowerCase()) || pair.company?.toLowerCase().includes(searchTerm.toLowerCase())),
                ...tradingPairs.commodities.filter(pair => pair.pair.toLowerCase().includes(searchTerm.toLowerCase()) || pair.name.toLowerCase().includes(searchTerm.toLowerCase()))
              ].length === 0 && (
                <div className="text-center py-12">
                  <div className="w-20 h-20 bg-gray-100 rounded-2xl flex items-center justify-center mx-auto mb-4">
                    <svg className="w-10 h-10 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                    </svg>
                  </div>
                  <h3 className="text-xl font-bold text-gray-900 mb-2">No trading pairs found</h3>
                  <p className="text-gray-500 mb-4">Try adjusting your search terms or browse our available instruments above.</p>
                  <button
                    onClick={() => setSearchTerm('')}
                    className="px-6 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-colors font-semibold"
                  >
                    Clear search
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Strategy Selection Modal - Beautiful Design */}
      {showStrategyModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4 backdrop-blur-sm">
          <div className="bg-white rounded-3xl w-full max-w-3xl max-h-[90vh] overflow-hidden shadow-2xl">
            <div className="p-8 border-b border-gray-100 bg-gradient-to-r from-purple-50 to-indigo-50">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <div className="w-12 h-12 bg-white rounded-2xl flex items-center justify-center shadow-sm">
                    <svg className="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-2xl font-bold text-gray-900">Select Trading Strategy</h3>
                    <p className="text-gray-600">Choose from your saved strategies or create a new one</p>
                  </div>
                </div>
                <button
                  onClick={() => setShowStrategyModal(false)}
                  className="p-3 text-gray-400 hover:text-gray-600 rounded-2xl hover:bg-white transition-all"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            
            <div className="p-8 overflow-y-auto max-h-[70vh]">
              <div className="space-y-4">
                {strategies.map((strategy) => (
                  <button
                    key={strategy}
                    onClick={() => selectStrategy({ name: strategy })}
                    className="w-full p-5 text-left border border-gray-200 rounded-2xl hover:border-purple-300 hover:bg-purple-50 transition-all duration-200 group shadow-sm hover:shadow-md"
                  >
                    <div className="flex items-center space-x-4">
                      <div className="w-12 h-12 bg-gradient-to-r from-purple-400 to-purple-600 rounded-2xl flex items-center justify-center shadow-sm">
                        <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                        </svg>
                      </div>
                      <div className="flex-1">
                        <p className="font-bold text-gray-900 group-hover:text-purple-700 text-lg">{strategy}</p>
                        <p className="text-sm text-gray-500">Trading strategy</p>
                      </div>
                    </div>
                  </button>
                ))}
                
                {/* Add Custom Strategy Button */}
                <button
                  onClick={() => {
                    const customStrategy = prompt('Enter custom strategy name:');
                    if (customStrategy && customStrategy.trim()) {
                      if (!strategies.includes(customStrategy.trim())) {
                        setStrategies(prev => [...prev, customStrategy.trim()]);
                      }
                      selectStrategy({ name: customStrategy.trim() });
                    }
                  }}
                  className="w-full p-5 text-left border-2 border-dashed border-purple-300 rounded-2xl hover:border-purple-400 hover:bg-purple-50 transition-all duration-200 group"
                >
                  <div className="flex items-center space-x-4">
                    <div className="w-12 h-12 bg-purple-100 rounded-2xl flex items-center justify-center group-hover:bg-purple-200 transition-colors shadow-sm">
                      <svg className="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                      </svg>
                    </div>
                    <div className="flex-1">
                      <p className="font-bold text-purple-700 group-hover:text-purple-800 text-lg">Add Custom Strategy</p>
                      <p className="text-sm text-purple-500">Create a new trading strategy</p>
                    </div>
                  </div>
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Strategy Selection Modal - Minimal Professional Design */}
      {showStrategyModal && (
        <div className="fixed inset-0 bg-black/40 backdrop-blur-sm flex items-center justify-center z-50 p-4 animate-in fade-in duration-200">
          <div className="bg-white rounded-2xl w-full max-w-2xl max-h-[85vh] overflow-hidden shadow-xl border border-gray-100 animate-in slide-in-from-bottom-4 duration-300">
            
            {/* Minimal Header */}
            <div className="relative p-6 border-b border-gray-100 bg-gray-50/50">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-xl font-semibold text-gray-900">Trading Strategies</h3>
                  <p className="text-sm text-gray-500 mt-1">Choose or create your trading strategy</p>
                </div>
                <button
                  onClick={() => setShowStrategyModal(false)}
                  className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-all duration-200"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>

            {/* Content */}
            <div className="p-6 overflow-y-auto max-h-[70vh] bg-white">
              
              {/* Add New Strategy Button */}
              <div className="mb-6">
                <button
                  onClick={() => setShowAddStrategyForm(!showAddStrategyForm)}
                  className="w-full p-4 border-2 border-dashed border-gray-200 rounded-xl hover:border-blue-300 hover:bg-blue-50/50 transition-all duration-200 group"
                >
                  <div className="flex items-center justify-center space-x-3">
                    <div className="w-8 h-8 bg-blue-100 group-hover:bg-blue-200 rounded-lg flex items-center justify-center transition-colors">
                      <svg className="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                      </svg>
                    </div>
                    <span className="font-medium text-gray-700 group-hover:text-blue-700">Create New Strategy</span>
                  </div>
                </button>
              </div>

              {/* Add Strategy Form */}
              {showAddStrategyForm && (
                <div className="mb-6 p-4 bg-gray-50 rounded-xl border border-gray-200 animate-in slide-in-from-top-2 duration-300">
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Strategy Name</label>
                      <input
                        type="text"
                        value={newStrategyName}
                        onChange={(e) => setNewStrategyName(e.target.value)}
                        placeholder="e.g., RSI Divergence"
                        className="w-full px-3 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors text-sm"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Description (Optional)</label>
                      <textarea
                        value={newStrategyDescription}
                        onChange={(e) => setNewStrategyDescription(e.target.value)}
                        placeholder="Brief description of your strategy..."
                        rows={2}
                        className="w-full px-3 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors text-sm resize-none"
                      />
                    </div>
                    <div className="flex space-x-3 pt-2">
                      <button
                        onClick={saveStrategy}
                        disabled={!newStrategyName.trim()}
                        className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors text-sm font-medium"
                      >
                        Save Strategy
                      </button>
                      <button
                        onClick={() => {
                          setShowAddStrategyForm(false);
                          setNewStrategyName('');
                          setNewStrategyDescription('');
                        }}
                        className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors text-sm font-medium"
                      >
                        Cancel
                      </button>
                    </div>
                  </div>
                </div>
              )}

              {/* Strategy List */}
              <div className="space-y-2">
                {getAllStrategies()
                  .filter(strategy => 
                    strategy.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                    (strategy.description && strategy.description.toLowerCase().includes(searchTerm.toLowerCase()))
                  )
                  .map((strategy) => (
                  <button
                    key={strategy.id}
                    onClick={() => selectStrategy(strategy)}
                    className="w-full p-4 text-left border border-gray-100 rounded-xl hover:border-gray-200 hover:bg-gray-50/50 transition-all duration-200 group"
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4">
                        <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${
                          strategy.isDefault 
                            ? 'bg-blue-100 text-blue-600' 
                            : 'bg-green-100 text-green-600'
                        }`}>
                          {strategy.isDefault ? (
                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                          ) : (
                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                            </svg>
                          )}
                        </div>
                        <div className="flex-1">
                          <p className="font-medium text-gray-900 group-hover:text-gray-700">{strategy.name}</p>
                          {strategy.description && (
                            <p className="text-sm text-gray-500 mt-1">{strategy.description}</p>
                          )}
                          <p className="text-xs text-gray-400 mt-1">
                            {strategy.isDefault ? 'Default Strategy' : 'Custom Strategy'}
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        {!strategy.isDefault && (
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              if (confirm('Delete this strategy?')) {
                                deleteStrategy(strategy.id);
                              }
                            }}
                            className="p-1.5 text-gray-400 hover:text-red-500 hover:bg-red-50 rounded-lg transition-all"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                          </button>
                        )}
                        <svg className="w-5 h-5 text-gray-300 group-hover:text-gray-400 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                        </svg>
                      </div>
                    </div>
                  </button>
                ))}
              </div>

              {/* Empty State */}
              {getAllStrategies().length === 0 && (
                <div className="text-center py-8 text-gray-500">
                  <svg className="w-12 h-12 mx-auto text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                  </svg>
                  <p className="text-lg font-medium text-gray-900 mb-2">No strategies found</p>
                  <p className="text-sm">Create your first custom strategy above</p>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Simplified Strategy Selection Modal */}
      {showStrategyModal && (
        <div className="fixed inset-0 bg-black/40 backdrop-blur-sm flex items-center justify-center z-50 p-4 animate-in fade-in duration-200">
          <div className="bg-white rounded-2xl w-full max-w-xl max-h-[80vh] overflow-hidden shadow-xl border border-gray-100 animate-in slide-in-from-bottom-4 duration-300">
            
            {/* Header */}
            <div className="p-6 border-b border-gray-100">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900">Select Strategy</h3>
                  <p className="text-sm text-gray-500 mt-1">Choose from available trading strategies</p>
                </div>
                <button
                  onClick={() => setShowStrategyModal(false)}
                  className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-all"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>

            {/* Content */}
            <div className="p-6 overflow-y-auto max-h-[60vh]">
              {loadingStrategies ? (
                <div className="flex items-center justify-center py-8">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                  <span className="ml-3 text-gray-600">Loading strategies...</span>
                </div>
              ) : (
                <div className="space-y-2">
                  {tradingStrategies.map((strategy) => (
                    <button
                      key={strategy.id}
                      onClick={() => selectStrategy(strategy)}
                      className="w-full p-4 text-left border border-gray-100 rounded-xl hover:border-blue-200 hover:bg-blue-50/50 transition-all duration-200 group"
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                            <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                            </svg>
                          </div>
                          <div className="flex-1">
                            <p className="font-medium text-gray-900">{strategy.name}</p>
                            <p className="text-sm text-gray-500 mt-1">{strategy.description}</p>
                            <span className="inline-block px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded-md mt-2">
                              {strategy.category}
                            </span>
                          </div>
                        </div>
                        <svg className="w-5 h-5 text-gray-300 group-hover:text-blue-500 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                        </svg>
                      </div>
                    </button>
                  ))}
                </div>
              )}

              {/* Empty State */}
              {!loadingStrategies && tradingStrategies.length === 0 && (
                <div className="text-center py-8 text-gray-500">
                  <svg className="w-12 h-12 mx-auto text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                  </svg>
                  <p className="text-lg font-medium text-gray-900 mb-2">No strategies available</p>
                  <p className="text-sm">Please check your connection and try again</p>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
}