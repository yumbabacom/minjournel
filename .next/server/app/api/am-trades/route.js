(()=>{var e={};e.id=828,e.ids=[828],e.modules={846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},2518:e=>{"use strict";e.exports=require("mongodb")},3033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},3834:(e,t,r)=>{"use strict";let s;r.d(t,{$V:()=>l,Ay:()=>p});var n=r(6037),a=r.n(n),o=r(2518);let i=process.env.MONGODB_URI||"mongodb+srv://tmuneebanjum:A5Y1enJBJcDVwPrt@jorn.nx9fd28.mongodb.net/smartsave",u="trading-journal";if(!i)throw Error("Please define the MONGODB_URI environment variable inside .env.local");let d=global.mongoose;async function c(){if(d.conn)return d.conn;d.promise||(d.promise=a().connect(i,{bufferCommands:!1}).then(e=>e));try{d.conn=await d.promise}catch(e){throw d.promise=null,e}return d.conn}async function l(){try{let e=await s;console.log("Connected to MongoDB successfully, using database:",u);let t=e.db(u);return{client:e,db:t}}catch(e){throw console.error("Failed to connect to database:",e),e}}d||(d=global.mongoose={conn:null,promise:null}),s=new o.MongoClient(i).connect();let p=c},4870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},6037:e=>{"use strict";e.exports=require("mongoose")},6487:()=>{},6509:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>y,routeModule:()=>g,serverHooks:()=>w,workAsyncStorage:()=>f,workUnitAsyncStorage:()=>x});var s={};r.r(s),r.d(s,{DELETE:()=>m,GET:()=>c,POST:()=>l,PUT:()=>p});var n=r(6559),a=r(8088),o=r(7719),i=r(3834),u=r(2190),d=r(2518);async function c(e){try{let{searchParams:t}=new URL(e.url),r=t.get("userId"),s=t.get("accountId");if(!r)return u.NextResponse.json({error:"User ID is required"},{status:400});let{db:n}=await (0,i.$V)(),a={userId:r};s&&(a.accountId=s);let o=await n.collection("am_trades").find(a).sort({createdAt:-1}).toArray();return u.NextResponse.json({trades:o})}catch(e){return console.error("Error fetching AM trades:",e),u.NextResponse.json({error:"Failed to fetch AM trades"},{status:500})}}async function l(e){try{let{userId:t,accountId:r,dateTime:s,manualDateTime:n,weekday:a,month:o,quarter:d,accountSize:c,direction:l,tradingPair:p,strategy:m,entryPrice:g,takeProfit:f,stopLoss:x,setup:w,htfFramework:y,dailyProfile:j,entryCandle:R,entryTime:A,entryTimeFrame:h,entryConfluence:M,duration:v,riskPercent:I,plannedRR:N,analysis:T,notes:b,riskManagementLessons:P,tags:D,screenshot:k,calculatedResults:q}=await e.json();if(!t||!r||!p||!g||!f||!x)return u.NextResponse.json({error:"Required fields missing"},{status:400});let{db:E}=await (0,i.$V)(),F={userId:t,accountId:r,dateTime:s||new Date().toISOString(),manualDateTime:n||!1,weekday:a||"",month:o||"",quarter:d||"",accountSize:parseFloat(c)||0,direction:l||"",tradingPair:p||"",strategy:m||"",entryPrice:parseFloat(g),takeProfit:parseFloat(f),stopLoss:parseFloat(x),setup:w||"",htfFramework:y||"",dailyProfile:j||"",entryCandle:R||"",entryTime:A||"",entryTimeFrame:h||"",entryConfluence:M||"",duration:v||"",riskPercent:I||"2",plannedRR:N||"",analysis:T||"",notes:b||"",riskManagementLessons:P||"",tags:D||"",screenshot:k||null,calculatedResults:q||{},status:null,actualEntry:null,actualExit:null,actualProfit:null,exitReason:null,exitNotes:"",createdAt:new Date,updatedAt:new Date},O=await E.collection("am_trades").insertOne(F);return u.NextResponse.json({success:!0,tradeId:O.insertedId,message:"AM Trade created successfully"})}catch(e){return console.error("Error creating AM trade:",e),u.NextResponse.json({error:"Failed to create AM trade"},{status:500})}}async function p(e){try{let{tradeId:t,userId:r,_id:s,createdAt:n,...a}=await e.json();if(!t||!r)return u.NextResponse.json({error:"Trade ID and User ID are required"},{status:400});let{_id:o,userId:c,createdAt:l,...p}=a,{db:m}=await (0,i.$V)(),g=await m.collection("am_trades").updateOne({_id:new d.ObjectId(t),userId:r},{$set:{...p,updatedAt:new Date}});if(0===g.matchedCount)return u.NextResponse.json({error:"AM Trade not found"},{status:404});return u.NextResponse.json({success:!0,message:"AM Trade updated successfully"})}catch(e){return console.error("Error updating AM trade:",e),u.NextResponse.json({error:"Failed to update AM trade"},{status:500})}}async function m(e){try{let{searchParams:t}=new URL(e.url),r=t.get("tradeId")||t.get("id"),s=t.get("userId");if(!r)return u.NextResponse.json({error:"Trade ID is required"},{status:400});let{db:n}=await (0,i.$V)(),a={_id:new d.ObjectId(r)};s&&(a.userId=s);let o=await n.collection("am_trades").deleteOne(a);if(0===o.deletedCount)return u.NextResponse.json({error:"AM Trade not found or access denied"},{status:404});return u.NextResponse.json({success:!0,message:"AM Trade deleted successfully"})}catch(e){return console.error("Error deleting AM trade:",e),u.NextResponse.json({error:"Failed to delete AM trade"},{status:500})}}let g=new n.AppRouteRouteModule({definition:{kind:a.RouteKind.APP_ROUTE,page:"/api/am-trades/route",pathname:"/api/am-trades",filename:"route",bundlePath:"app/api/am-trades/route"},resolvedPagePath:"E:\\trading-journal-app\\app\\api\\am-trades\\route.js",nextConfigOutput:"",userland:s}),{workAsyncStorage:f,workUnitAsyncStorage:x,serverHooks:w}=g;function y(){return(0,o.patchFetch)({workAsyncStorage:f,workUnitAsyncStorage:x})}},8335:()=>{},9294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[447,580],()=>r(6509));module.exports=s})();