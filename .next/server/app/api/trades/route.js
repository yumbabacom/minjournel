(()=>{var e={};e.id=395,e.ids=[395],e.modules={846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},2518:e=>{"use strict";e.exports=require("mongodb")},2828:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>j,routeModule:()=>x,serverHooks:()=>w,workAsyncStorage:()=>f,workUnitAsyncStorage:()=>m});var s={};r.r(s),r.d(s,{DELETE:()=>g,GET:()=>c,POST:()=>l,PUT:()=>p});var n=r(6559),a=r(8088),o=r(7719),u=r(3834),i=r(2190),d=r(2518);async function c(e){try{let{searchParams:t}=new URL(e.url),r=t.get("userId"),s=t.get("accountId");if(!r)return i.NextResponse.json({error:"User ID is required"},{status:400});let{db:n}=await (0,u.$V)(),a={userId:r};s&&(a.accountId=s);let o=await n.collection("trades").find(a).sort({createdAt:-1}).toArray();return i.NextResponse.json({trades:o})}catch(e){return console.error("Error fetching trades:",e),i.NextResponse.json({error:"Failed to fetch trades"},{status:500})}}async function l(e){try{let{userId:t,accountId:r,accountSize:s,riskPerTrade:n,tradingPair:a,strategy:o,entryPrice:d,takeProfit:c,stopLoss:l,direction:p,status:g,analysis:x,tags:f,images:m,calculations:w}=await e.json();if(!t||!r||!a||!d||!c||!l)return i.NextResponse.json({error:"Required fields missing"},{status:400});let{db:j}=await (0,u.$V)(),y={userId:t,accountId:r,accountSize:parseFloat(s),riskPerTrade:parseFloat(n),tradingPair:a,strategy:o||null,entryPrice:parseFloat(d),takeProfit:parseFloat(c),stopLoss:parseFloat(l),direction:p,status:g||"planning",analysis:x||"",tags:f||"",images:m||[],calculations:w||{},actualEntry:null,actualExit:null,actualProfit:null,exitReason:null,notes:"",createdAt:new Date,updatedAt:new Date},R=await j.collection("trades").insertOne(y);return i.NextResponse.json({success:!0,tradeId:R.insertedId,message:"Trade created successfully"})}catch(e){return console.error("Error creating trade:",e),i.NextResponse.json({error:"Failed to create trade"},{status:500})}}async function p(e){try{let{tradeId:t,userId:r,_id:s,createdAt:n,...a}=await e.json();if(!t||!r)return i.NextResponse.json({error:"Trade ID and User ID are required"},{status:400});let{_id:o,userId:c,createdAt:l,...p}=a,{db:g}=await (0,u.$V)(),x=await g.collection("trades").updateOne({_id:new d.ObjectId(t),userId:r},{$set:{...p,updatedAt:new Date}});if(0===x.matchedCount)return i.NextResponse.json({error:"Trade not found"},{status:404});return i.NextResponse.json({success:!0,message:"Trade updated successfully"})}catch(e){return console.error("Error updating trade:",e),i.NextResponse.json({error:"Failed to update trade"},{status:500})}}async function g(e){try{let{searchParams:t}=new URL(e.url),r=t.get("tradeId")||t.get("id"),s=t.get("userId");if(!r)return i.NextResponse.json({error:"Trade ID is required"},{status:400});let{db:n}=await (0,u.$V)(),a={_id:new d.ObjectId(r)};s&&(a.userId=s);let o=await n.collection("trades").deleteOne(a);if(0===o.deletedCount)return i.NextResponse.json({error:"Trade not found or access denied"},{status:404});return i.NextResponse.json({success:!0,message:"Trade deleted successfully"})}catch(e){return console.error("Error deleting trade:",e),i.NextResponse.json({error:"Failed to delete trade"},{status:500})}}let x=new n.AppRouteRouteModule({definition:{kind:a.RouteKind.APP_ROUTE,page:"/api/trades/route",pathname:"/api/trades",filename:"route",bundlePath:"app/api/trades/route"},resolvedPagePath:"E:\\trading-journal-app\\app\\api\\trades\\route.js",nextConfigOutput:"",userland:s}),{workAsyncStorage:f,workUnitAsyncStorage:m,serverHooks:w}=x;function j(){return(0,o.patchFetch)({workAsyncStorage:f,workUnitAsyncStorage:m})}},3033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},3834:(e,t,r)=>{"use strict";let s;r.d(t,{$V:()=>l,Ay:()=>p});var n=r(6037),a=r.n(n),o=r(2518);let u=process.env.MONGODB_URI||"mongodb+srv://tmuneebanjum:A5Y1enJBJcDVwPrt@jorn.nx9fd28.mongodb.net/smartsave",i="trading-journal";if(!u)throw Error("Please define the MONGODB_URI environment variable inside .env.local");let d=global.mongoose;async function c(){if(d.conn)return d.conn;d.promise||(d.promise=a().connect(u,{bufferCommands:!1}).then(e=>e));try{d.conn=await d.promise}catch(e){throw d.promise=null,e}return d.conn}async function l(){try{let e=await s;console.log("Connected to MongoDB successfully, using database:",i);let t=e.db(i);return{client:e,db:t}}catch(e){throw console.error("Failed to connect to database:",e),e}}d||(d=global.mongoose={conn:null,promise:null}),s=new o.MongoClient(u).connect();let p=c},4870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},6037:e=>{"use strict";e.exports=require("mongoose")},6487:()=>{},8335:()=>{},9294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[447,580],()=>r(2828));module.exports=s})();