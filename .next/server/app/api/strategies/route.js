(()=>{var e={};e.id=501,e.ids=[501],e.modules={846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},2518:e=>{"use strict";e.exports=require("mongodb")},3033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},3834:(e,t,s)=>{"use strict";let r;s.d(t,{$V:()=>d,Ay:()=>g});var o=s(6037),n=s.n(o),a=s(2518);let i=process.env.MONGODB_URI||"mongodb+srv://tmuneebanjum:A5Y1enJBJcDVwPrt@jorn.nx9fd28.mongodb.net/smartsave",c="trading-journal";if(!i)throw Error("Please define the MONGODB_URI environment variable inside .env.local");let u=global.mongoose;async function l(){if(u.conn)return u.conn;u.promise||(u.promise=n().connect(i,{bufferCommands:!1}).then(e=>e));try{u.conn=await u.promise}catch(e){throw u.promise=null,e}return u.conn}async function d(){try{let e=await r;console.log("Connected to MongoDB successfully, using database:",c);let t=e.db(c);return{client:e,db:t}}catch(e){throw console.error("Failed to connect to database:",e),e}}u||(u=global.mongoose={conn:null,promise:null}),r=new a.MongoClient(i).connect();let g=l},4870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},5511:e=>{"use strict";e.exports=require("crypto")},6037:e=>{"use strict";e.exports=require("mongoose")},6487:()=>{},7910:e=>{"use strict";e.exports=require("stream")},8335:()=>{},8354:e=>{"use strict";e.exports=require("util")},9135:(e,t,s)=>{"use strict";s.r(t),s.d(t,{patchFetch:()=>w,routeModule:()=>x,serverHooks:()=>j,workAsyncStorage:()=>h,workUnitAsyncStorage:()=>v});var r={};s.r(r),s.d(r,{DELETE:()=>y,GET:()=>p,POST:()=>m,PUT:()=>f});var o=s(6559),n=s(8088),a=s(7719),i=s(3834),c=s(2190),u=s(2518),l=s(3205),d=s.n(l);let g="your-secret-key-change-in-production";async function p(e){let{searchParams:t}=new URL(e.url);if(t.get("health"))return console.log("Health check requested"),c.NextResponse.json({success:!0,message:"API is working",timestamp:new Date().toISOString(),env:{hasJwtSecret:!!process.env.JWT_SECRET,hasMongoUri:!!process.env.MONGODB_URI,nodeEnv:"production",hardcodedSecret:!!g}});console.log("API /api/strategies GET called");try{let t,s=e.headers.get("authorization");if(console.log("Auth header present:",!!s),!s||!s.startsWith("Bearer "))return console.log("No valid auth header found"),c.NextResponse.json({success:!1,message:"No token provided"},{status:401});let r=s.substring(7);console.log("Token extracted, length:",r.length);try{let e=process.env.JWT_SECRET||g;console.log("Using JWT secret:",e?"Secret found":"No secret available"),t=d().verify(r,e),console.log("Token decoded successfully:",t)}catch(e){return console.error("JWT verification error:",e),c.NextResponse.json({success:!1,message:"Invalid token: "+e.message},{status:401})}let o=t.userId;if(console.log("Token verified, userId:",o),!o)return console.log("No userId in token"),c.NextResponse.json({success:!1,message:"Invalid token - no user ID"},{status:401});console.log("Attempting to connect to MongoDB...");let{db:n}=await (0,i.$V)();console.log("MongoDB connected successfully");let a=n.collection("strategies");console.log("Fetching strategies for user:",o);let u=await a.find({userId:o.toString()}).sort({createdAt:-1}).toArray();return console.log("Found strategies:",u.length),c.NextResponse.json({success:!0,strategies:u||[]})}catch(e){if(console.error("Error in /api/strategies GET:",e),"JsonWebTokenError"===e.name)return console.log("JWT Error:",e.message),c.NextResponse.json({success:!1,message:"Invalid token: "+e.message},{status:401});return c.NextResponse.json({success:!1,message:"Failed to fetch strategies",error:"Internal server error"},{status:500})}}async function m(e){try{let{userId:t,name:s,marketType:r,tradingStyle:o,description:n,entryConditions:a,exitConditions:u,stopLossLogic:l,takeProfitLogic:d,riskPerTrade:g,maxDailyRisk:p,maxOpenTrades:m,positionSizing:f,indicators:y,toolsPatterns:x,tags:h,status:v,version:j}=await e.json();if(!t||!s||!r||!o)return c.NextResponse.json({error:"Required fields missing"},{status:400});let{db:w}=await (0,i.$V)(),R={userId:t,name:s,marketType:r,tradingStyle:o,description:n,entryConditions:a,exitConditions:u,stopLossLogic:l,takeProfitLogic:d,riskPerTrade:g,maxDailyRisk:p,maxOpenTrades:m,positionSizing:f,indicators:y,toolsPatterns:x,tags:h,status:v||"testing",version:j||"1.0",createdAt:new Date,updatedAt:new Date},I=await w.collection("strategies").insertOne(R);return c.NextResponse.json({success:!0,strategyId:I.insertedId,message:"Strategy created successfully"})}catch(e){return console.error("Error creating strategy:",e),c.NextResponse.json({error:"Failed to create strategy"},{status:500})}}async function f(e){try{let{strategyId:t,userId:s,_id:r,createdAt:o,...n}=await e.json();if(!t||!s)return c.NextResponse.json({error:"Strategy ID and User ID are required"},{status:400});let{_id:a,userId:l,createdAt:d,...g}=n,{db:p}=await (0,i.$V)(),m=await p.collection("strategies").updateOne({_id:new u.ObjectId(t),userId:s},{$set:{...g,updatedAt:new Date}});if(0===m.matchedCount)return c.NextResponse.json({error:"Strategy not found"},{status:404});return c.NextResponse.json({success:!0,message:"Strategy updated successfully"})}catch(e){return console.error("Error updating strategy:",e),c.NextResponse.json({error:"Failed to update strategy"},{status:500})}}async function y(e){try{let{searchParams:t}=new URL(e.url),s=t.get("strategyId"),r=t.get("userId");if(!s||!r)return c.NextResponse.json({error:"Strategy ID and User ID are required"},{status:400});let{db:o}=await (0,i.$V)(),n=await o.collection("strategies").deleteOne({_id:new u.ObjectId(s),userId:r});if(0===n.deletedCount)return c.NextResponse.json({error:"Strategy not found"},{status:404});return c.NextResponse.json({success:!0,message:"Strategy deleted successfully"})}catch(e){return console.error("Error deleting strategy:",e),c.NextResponse.json({error:"Failed to delete strategy"},{status:500})}}let x=new o.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/strategies/route",pathname:"/api/strategies",filename:"route",bundlePath:"app/api/strategies/route"},resolvedPagePath:"/home/runner/work/minjournel/minjournel/app/api/strategies/route.js",nextConfigOutput:"",userland:r}),{workAsyncStorage:h,workUnitAsyncStorage:v,serverHooks:j}=x;function w(){return(0,a.patchFetch)({workAsyncStorage:h,workUnitAsyncStorage:v})}},9294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},9428:e=>{"use strict";e.exports=require("buffer")}};var t=require("../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),r=t.X(0,[447,580,205],()=>s(9135));module.exports=r})();