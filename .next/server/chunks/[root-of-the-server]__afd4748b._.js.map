{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///E:/trading-journal-app/lib/mongodb.js"],"sourcesContent":["import mongoose from 'mongoose';\r\nimport { MongoClient } from 'mongodb';\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb+srv://tmuneebanjum:A5Y1enJBJcDVwPrt@jorn.nx9fd28.mongodb.net/smartsave';\r\nconst DB_NAME = 'trading-journal';\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\r\n}\r\n\r\n/**\r\n * Global is used here to maintain a cached connection across hot reloads\r\n * in development. This prevents connections growing exponentially\r\n * during API Route usage.\r\n */\r\nlet cached = global.mongoose;\r\n\r\nif (!cached) {\r\n  cached = global.mongoose = { conn: null, promise: null };\r\n}\r\n\r\n// Mongoose connection (for existing code)\r\nasync function connectDB() {\r\n  if (cached.conn) {\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    const opts = {\r\n      bufferCommands: false,\r\n    };\r\n\r\n    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {\r\n      return mongoose;\r\n    });\r\n  }\r\n\r\n  try {\r\n    cached.conn = await cached.promise;\r\n  } catch (e) {\r\n    cached.promise = null;\r\n    throw e;\r\n  }\r\n\r\n  return cached.conn;\r\n}\r\n\r\n// Native MongoDB driver connection (for API routes)\r\nlet clientPromise;\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  // In development mode, use a global variable so that the value\r\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\r\n  if (!global._mongoClientPromise) {\r\n    const client = new MongoClient(MONGODB_URI);\r\n    global._mongoClientPromise = client.connect();\r\n  }\r\n  clientPromise = global._mongoClientPromise;\r\n} else {\r\n  // In production mode, it's best to not use a global variable.\r\n  const client = new MongoClient(MONGODB_URI);\r\n  clientPromise = client.connect();\r\n}\r\n\r\n// Connect to database function expected by API routes\r\nexport async function connectToDatabase() {\r\n  try {\r\n    const client = await clientPromise;\r\n    console.log('Connected to MongoDB successfully, using database:', DB_NAME);\r\n    const db = client.db(DB_NAME); \r\n    return { client, db };\r\n  } catch (error) {\r\n    console.error('Failed to connect to database:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Export both for compatibility\r\nexport default connectDB;\r\nexport { connectDB }; "],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW,IAAI;AAC/C,MAAM,UAAU;AAEhB,uCAAkB;;AAElB;AAEA;;;;CAIC,GACD,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,0CAA0C;AAC1C,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,MAAM,IAAI,CAAC,CAAC;YACzD,OAAO;QACT;IACF;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,GAAG;QACV,OAAO,OAAO,GAAG;QACjB,MAAM;IACR;IAEA,OAAO,OAAO,IAAI;AACpB;AAEA,oDAAoD;AACpD,IAAI;AAEJ,wCAA4C;IAC1C,+DAA+D;IAC/D,6EAA6E;IAC7E,IAAI,CAAC,OAAO,mBAAmB,EAAE;QAC/B,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC;QAC/B,OAAO,mBAAmB,GAAG,OAAO,OAAO;IAC7C;IACA,gBAAgB,OAAO,mBAAmB;AAC5C,OAAO;;AAIP;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM;QACrB,QAAQ,GAAG,CAAC,sDAAsD;QAClE,MAAM,KAAK,OAAO,EAAE,CAAC;QACrB,OAAO;YAAE;YAAQ;QAAG;IACtB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,MAAM;IACR;AACF;uCAGe","debugId":null}},
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"sources":["file:///E:/trading-journal-app/app/api/am-trades/route.js"],"sourcesContent":["import { connectToDatabase } from '../../../lib/mongodb';\nimport { NextResponse } from 'next/server';\nimport { ObjectId } from 'mongodb';\n\n// GET - Fetch AM trades for a user, optionally filtered by account\nexport async function GET(request) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const userId = searchParams.get('userId');\n    const accountId = searchParams.get('accountId');\n\n    if (!userId) {\n      return NextResponse.json({ error: 'User ID is required' }, { status: 400 });\n    }\n\n    const { db } = await connectToDatabase();\n\n    // Build query filter\n    const filter = { userId };\n    if (accountId) {\n      filter.accountId = accountId;\n    }\n\n    const amTrades = await db.collection('am_trades').find(filter).sort({ createdAt: -1 }).toArray();\n\n    return NextResponse.json({ trades: amTrades });\n  } catch (error) {\n    console.error('Error fetching AM trades:', error);\n    return NextResponse.json({ error: 'Failed to fetch AM trades' }, { status: 500 });\n  }\n}\n\n// POST - Create a new AM trade\nexport async function POST(request) {\n  try {\n    const body = await request.json();\n    const { \n      userId, \n      accountId, \n      // Date & Time\n      dateTime,\n      manualDateTime,\n      weekday,\n      month,\n      quarter,\n      // Basic Trade Info\n      accountSize, \n      direction,\n      tradingPair, \n      strategy,\n      entryPrice, \n      takeProfit, \n      stopLoss,\n      // AM Trade Specific Fields\n      setup,\n      htfFramework,\n      dailyProfile,\n      entryCandle,\n      entryTime,\n      entryTimeFrame,\n      entryConfluence,\n      duration,\n      riskPercent,\n      plannedRR,\n      // Additional fields\n      analysis,\n      notes,\n      riskManagementLessons,\n      tags,\n      screenshot,\n      // Calculated results\n      calculatedResults\n    } = body;\n\n    if (!userId || !accountId || !tradingPair || !entryPrice || !takeProfit || !stopLoss) {\n      return NextResponse.json({ error: 'Required fields missing' }, { status: 400 });\n    }\n\n    const { db } = await connectToDatabase();\n    \n    const amTradeData = {\n      userId,\n      accountId,\n      // Date & Time\n      dateTime: dateTime || new Date().toISOString(),\n      manualDateTime: manualDateTime || false,\n      weekday: weekday || '',\n      month: month || '',\n      quarter: quarter || '',\n      // Basic Trade Info\n      accountSize: parseFloat(accountSize) || 0,\n      direction: direction || '',\n      tradingPair: tradingPair || '',\n      strategy: strategy || '',\n      entryPrice: parseFloat(entryPrice),\n      takeProfit: parseFloat(takeProfit),\n      stopLoss: parseFloat(stopLoss),\n      // AM Trade Specific Fields\n      setup: setup || '',\n      htfFramework: htfFramework || '',\n      dailyProfile: dailyProfile || '',\n      entryCandle: entryCandle || '',\n      entryTime: entryTime || '',\n      entryTimeFrame: entryTimeFrame || '',\n      entryConfluence: entryConfluence || '',\n      duration: duration || '',\n      riskPercent: riskPercent || '2',\n      plannedRR: plannedRR || '',\n      // Additional fields\n      analysis: analysis || '',\n      notes: notes || '',\n      riskManagementLessons: riskManagementLessons || '',\n      tags: tags || '',\n      screenshot: screenshot || null,\n      // Calculated results\n      calculatedResults: calculatedResults || {},\n      // Trade status fields\n      status: null, // pending, win, loss\n      actualEntry: null,\n      actualExit: null,\n      actualProfit: null,\n      exitReason: null,\n      exitNotes: '',\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    const result = await db.collection('am_trades').insertOne(amTradeData);\n\n    return NextResponse.json({ \n      success: true, \n      tradeId: result.insertedId,\n      message: 'AM Trade created successfully'\n    });\n  } catch (error) {\n    console.error('Error creating AM trade:', error);\n    return NextResponse.json({ error: 'Failed to create AM trade' }, { status: 500 });\n  }\n}\n\n// PUT - Update an existing AM trade\nexport async function PUT(request) {\n  try {\n    const body = await request.json();\n    const { tradeId, userId, _id, createdAt, ...updateData } = body;\n\n    if (!tradeId || !userId) {\n      return NextResponse.json({ error: 'Trade ID and User ID are required' }, { status: 400 });\n    }\n\n    // Remove any immutable fields that shouldn't be updated\n    const { _id: removeId, userId: removeUserId, createdAt: removeCreatedAt, ...cleanUpdateData } = updateData;\n\n    const { db } = await connectToDatabase();\n    \n    const result = await db.collection('am_trades').updateOne(\n      { _id: new ObjectId(tradeId), userId },\n      { \n        $set: { \n          ...cleanUpdateData, \n          updatedAt: new Date() \n        } \n      }\n    );\n\n    if (result.matchedCount === 0) {\n      return NextResponse.json({ error: 'AM Trade not found' }, { status: 404 });\n    }\n\n    return NextResponse.json({ \n      success: true, \n      message: 'AM Trade updated successfully' \n    });\n  } catch (error) {\n    console.error('Error updating AM trade:', error);\n    return NextResponse.json({ error: 'Failed to update AM trade' }, { status: 500 });\n  }\n}\n\n// DELETE - Delete an AM trade\nexport async function DELETE(request) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const tradeId = searchParams.get('tradeId') || searchParams.get('id');\n    const userId = searchParams.get('userId');\n\n    if (!tradeId) {\n      return NextResponse.json({ error: 'Trade ID is required' }, { status: 400 });\n    }\n\n    const { db } = await connectToDatabase();\n\n    // Build delete filter\n    const deleteFilter = { _id: new ObjectId(tradeId) };\n    if (userId) {\n      deleteFilter.userId = userId;\n    }\n\n    const result = await db.collection('am_trades').deleteOne(deleteFilter);\n\n    if (result.deletedCount === 0) {\n      return NextResponse.json({ error: 'AM Trade not found or access denied' }, { status: 404 });\n    }\n\n    return NextResponse.json({ \n      success: true, \n      message: 'AM Trade deleted successfully' \n    });\n  } catch (error) {\n    console.error('Error deleting AM trade:', error);\n    return NextResponse.json({ error: 'Failed to delete AM trade' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;;;;AAGO,eAAe,IAAI,OAAO;IAC/B,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,SAAS,aAAa,GAAG,CAAC;QAChC,MAAM,YAAY,aAAa,GAAG,CAAC;QAEnC,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,CAAA,GAAA,gHAAA,CAAA,oBAAiB,AAAD;QAErC,qBAAqB;QACrB,MAAM,SAAS;YAAE;QAAO;QACxB,IAAI,WAAW;YACb,OAAO,SAAS,GAAG;QACrB;QAEA,MAAM,WAAW,MAAM,GAAG,UAAU,CAAC,aAAa,IAAI,CAAC,QAAQ,IAAI,CAAC;YAAE,WAAW,CAAC;QAAE,GAAG,OAAO;QAE9F,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,QAAQ;QAAS;IAC9C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA4B,GAAG;YAAE,QAAQ;QAAI;IACjF;AACF;AAGO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EACJ,MAAM,EACN,SAAS,EACT,cAAc;QACd,QAAQ,EACR,cAAc,EACd,OAAO,EACP,KAAK,EACL,OAAO,EACP,mBAAmB;QACnB,WAAW,EACX,SAAS,EACT,WAAW,EACX,QAAQ,EACR,UAAU,EACV,UAAU,EACV,QAAQ,EACR,2BAA2B;QAC3B,KAAK,EACL,YAAY,EACZ,YAAY,EACZ,WAAW,EACX,SAAS,EACT,cAAc,EACd,eAAe,EACf,QAAQ,EACR,WAAW,EACX,SAAS,EACT,oBAAoB;QACpB,QAAQ,EACR,KAAK,EACL,qBAAqB,EACrB,IAAI,EACJ,UAAU,EACV,qBAAqB;QACrB,iBAAiB,EAClB,GAAG;QAEJ,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,eAAe,CAAC,cAAc,CAAC,cAAc,CAAC,UAAU;YACpF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,CAAA,GAAA,gHAAA,CAAA,oBAAiB,AAAD;QAErC,MAAM,cAAc;YAClB;YACA;YACA,cAAc;YACd,UAAU,YAAY,IAAI,OAAO,WAAW;YAC5C,gBAAgB,kBAAkB;YAClC,SAAS,WAAW;YACpB,OAAO,SAAS;YAChB,SAAS,WAAW;YACpB,mBAAmB;YACnB,aAAa,WAAW,gBAAgB;YACxC,WAAW,aAAa;YACxB,aAAa,eAAe;YAC5B,UAAU,YAAY;YACtB,YAAY,WAAW;YACvB,YAAY,WAAW;YACvB,UAAU,WAAW;YACrB,2BAA2B;YAC3B,OAAO,SAAS;YAChB,cAAc,gBAAgB;YAC9B,cAAc,gBAAgB;YAC9B,aAAa,eAAe;YAC5B,WAAW,aAAa;YACxB,gBAAgB,kBAAkB;YAClC,iBAAiB,mBAAmB;YACpC,UAAU,YAAY;YACtB,aAAa,eAAe;YAC5B,WAAW,aAAa;YACxB,oBAAoB;YACpB,UAAU,YAAY;YACtB,OAAO,SAAS;YAChB,uBAAuB,yBAAyB;YAChD,MAAM,QAAQ;YACd,YAAY,cAAc;YAC1B,qBAAqB;YACrB,mBAAmB,qBAAqB,CAAC;YACzC,sBAAsB;YACtB,QAAQ;YACR,aAAa;YACb,YAAY;YACZ,cAAc;YACd,YAAY;YACZ,WAAW;YACX,WAAW,IAAI;YACf,WAAW,IAAI;QACjB;QAEA,MAAM,SAAS,MAAM,GAAG,UAAU,CAAC,aAAa,SAAS,CAAC;QAE1D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS,OAAO,UAAU;YAC1B,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA4B,GAAG;YAAE,QAAQ;QAAI;IACjF;AACF;AAGO,eAAe,IAAI,OAAO;IAC/B,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,YAAY,GAAG;QAE3D,IAAI,CAAC,WAAW,CAAC,QAAQ;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAoC,GAAG;gBAAE,QAAQ;YAAI;QACzF;QAEA,wDAAwD;QACxD,MAAM,EAAE,KAAK,QAAQ,EAAE,QAAQ,YAAY,EAAE,WAAW,eAAe,EAAE,GAAG,iBAAiB,GAAG;QAEhG,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,CAAA,GAAA,gHAAA,CAAA,oBAAiB,AAAD;QAErC,MAAM,SAAS,MAAM,GAAG,UAAU,CAAC,aAAa,SAAS,CACvD;YAAE,KAAK,IAAI,uGAAA,CAAA,WAAQ,CAAC;YAAU;QAAO,GACrC;YACE,MAAM;gBACJ,GAAG,eAAe;gBAClB,WAAW,IAAI;YACjB;QACF;QAGF,IAAI,OAAO,YAAY,KAAK,GAAG;YAC7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAqB,GAAG;gBAAE,QAAQ;YAAI;QAC1E;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA4B,GAAG;YAAE,QAAQ;QAAI;IACjF;AACF;AAGO,eAAe,OAAO,OAAO;IAClC,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,UAAU,aAAa,GAAG,CAAC,cAAc,aAAa,GAAG,CAAC;QAChE,MAAM,SAAS,aAAa,GAAG,CAAC;QAEhC,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAuB,GAAG;gBAAE,QAAQ;YAAI;QAC5E;QAEA,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,CAAA,GAAA,gHAAA,CAAA,oBAAiB,AAAD;QAErC,sBAAsB;QACtB,MAAM,eAAe;YAAE,KAAK,IAAI,uGAAA,CAAA,WAAQ,CAAC;QAAS;QAClD,IAAI,QAAQ;YACV,aAAa,MAAM,GAAG;QACxB;QAEA,MAAM,SAAS,MAAM,GAAG,UAAU,CAAC,aAAa,SAAS,CAAC;QAE1D,IAAI,OAAO,YAAY,KAAK,GAAG;YAC7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsC,GAAG;gBAAE,QAAQ;YAAI;QAC3F;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA4B,GAAG;YAAE,QAAQ;QAAI;IACjF;AACF","debugId":null}}]
}