{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///E:/trading-journal-app/lib/mongodb.js"],"sourcesContent":["import mongoose from 'mongoose';\r\nimport { MongoClient } from 'mongodb';\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb+srv://tmuneebanjum:A5Y1enJBJcDVwPrt@jorn.nx9fd28.mongodb.net/smartsave';\r\nconst DB_NAME = 'trading-journal';\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\r\n}\r\n\r\n/**\r\n * Global is used here to maintain a cached connection across hot reloads\r\n * in development. This prevents connections growing exponentially\r\n * during API Route usage.\r\n */\r\nlet cached = global.mongoose;\r\n\r\nif (!cached) {\r\n  cached = global.mongoose = { conn: null, promise: null };\r\n}\r\n\r\n// Mongoose connection (for existing code)\r\nasync function connectDB() {\r\n  if (cached.conn) {\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    const opts = {\r\n      bufferCommands: false,\r\n    };\r\n\r\n    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {\r\n      return mongoose;\r\n    });\r\n  }\r\n\r\n  try {\r\n    cached.conn = await cached.promise;\r\n  } catch (e) {\r\n    cached.promise = null;\r\n    throw e;\r\n  }\r\n\r\n  return cached.conn;\r\n}\r\n\r\n// Native MongoDB driver connection (for API routes)\r\nlet clientPromise;\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  // In development mode, use a global variable so that the value\r\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\r\n  if (!global._mongoClientPromise) {\r\n    const client = new MongoClient(MONGODB_URI);\r\n    global._mongoClientPromise = client.connect();\r\n  }\r\n  clientPromise = global._mongoClientPromise;\r\n} else {\r\n  // In production mode, it's best to not use a global variable.\r\n  const client = new MongoClient(MONGODB_URI);\r\n  clientPromise = client.connect();\r\n}\r\n\r\n// Connect to database function expected by API routes\r\nexport async function connectToDatabase() {\r\n  try {\r\n    const client = await clientPromise;\r\n    console.log('Connected to MongoDB successfully, using database:', DB_NAME);\r\n    const db = client.db(DB_NAME); \r\n    return { client, db };\r\n  } catch (error) {\r\n    console.error('Failed to connect to database:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Export both for compatibility\r\nexport default connectDB;\r\nexport { connectDB }; "],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW,IAAI;AAC/C,MAAM,UAAU;AAEhB,uCAAkB;;AAElB;AAEA;;;;CAIC,GACD,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,0CAA0C;AAC1C,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,MAAM,IAAI,CAAC,CAAC;YACzD,OAAO;QACT;IACF;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,GAAG;QACV,OAAO,OAAO,GAAG;QACjB,MAAM;IACR;IAEA,OAAO,OAAO,IAAI;AACpB;AAEA,oDAAoD;AACpD,IAAI;AAEJ,wCAA4C;IAC1C,+DAA+D;IAC/D,6EAA6E;IAC7E,IAAI,CAAC,OAAO,mBAAmB,EAAE;QAC/B,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC;QAC/B,OAAO,mBAAmB,GAAG,OAAO,OAAO;IAC7C;IACA,gBAAgB,OAAO,mBAAmB;AAC5C,OAAO;;AAIP;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM;QACrB,QAAQ,GAAG,CAAC,sDAAsD;QAClE,MAAM,KAAK,OAAO,EAAE,CAAC;QACrB,OAAO;YAAE;YAAQ;QAAG;IACtB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,MAAM;IACR;AACF;uCAGe","debugId":null}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":["file:///E:/trading-journal-app/models/User.js"],"sourcesContent":["import mongoose from 'mongoose';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nconst UserSchema = new mongoose.Schema({\r\n  fullName: {\r\n    type: String,\r\n    required: [true, 'Please provide a full name'],\r\n    maxlength: [60, 'Name cannot be more than 60 characters'],\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: [true, 'Please provide an email'],\r\n    unique: true,\r\n    lowercase: true,\r\n    match: [\r\n      /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\r\n      'Please provide a valid email',\r\n    ],\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: [true, 'Please provide a password'],\r\n    minlength: [6, 'Password must be at least 6 characters'],\r\n    select: false, // Don't include password in queries by default\r\n  },\r\n  createdAt: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n  lastLogin: {\r\n    type: Date,\r\n  },\r\n  isActive: {\r\n    type: Boolean,\r\n    default: true,\r\n  },\r\n});\r\n\r\n// Hash password before saving\r\nUserSchema.pre('save', async function (next) {\r\n  // Only hash the password if it has been modified (or is new)\r\n  if (!this.isModified('password')) return next();\r\n\r\n  try {\r\n    // Hash password with cost of 12\r\n    const hashedPassword = await bcrypt.hash(this.password, 12);\r\n    this.password = hashedPassword;\r\n    next();\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n});\r\n\r\n// Instance method to check password\r\nUserSchema.methods.comparePassword = async function (candidatePassword) {\r\n  return await bcrypt.compare(candidatePassword, this.password);\r\n};\r\n\r\n// Instance method to get user data without password\r\nUserSchema.methods.toPublicJSON = function () {\r\n  const userObject = this.toObject();\r\n  delete userObject.password;\r\n  return userObject;\r\n};\r\n\r\nexport default mongoose.models.User || mongoose.model('User', UserSchema); "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,UAAU;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAA6B;QAC9C,WAAW;YAAC;YAAI;SAAyC;IAC3D;IACA,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAA0B;QAC3C,QAAQ;QACR,WAAW;QACX,OAAO;YACL;YACA;SACD;IACH;IACA,UAAU;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAA4B;QAC7C,WAAW;YAAC;YAAG;SAAyC;QACxD,QAAQ;IACV;IACA,WAAW;QACT,MAAM;QACN,SAAS,KAAK,GAAG;IACnB;IACA,WAAW;QACT,MAAM;IACR;IACA,UAAU;QACR,MAAM;QACN,SAAS;IACX;AACF;AAEA,8BAA8B;AAC9B,WAAW,GAAG,CAAC,QAAQ,eAAgB,IAAI;IACzC,6DAA6D;IAC7D,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,OAAO;IAEzC,IAAI;QACF,gCAAgC;QAChC,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;QACxD,IAAI,CAAC,QAAQ,GAAG;QAChB;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;AAEA,oCAAoC;AACpC,WAAW,OAAO,CAAC,eAAe,GAAG,eAAgB,iBAAiB;IACpE,OAAO,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,mBAAmB,IAAI,CAAC,QAAQ;AAC9D;AAEA,oDAAoD;AACpD,WAAW,OAAO,CAAC,YAAY,GAAG;IAChC,MAAM,aAAa,IAAI,CAAC,QAAQ;IAChC,OAAO,WAAW,QAAQ;IAC1B,OAAO;AACT;uCAEe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ","debugId":null}},
    {"offset": {"line": 275, "column": 0}, "map": {"version":3,"sources":["file:///E:/trading-journal-app/app/api/auth/login/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport jwt from 'jsonwebtoken';\nimport connectDB from '../../../../lib/mongodb';\nimport User from '../../../../models/User';\n\n// Use the same hardcoded JWT secret for consistency\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';\n\nexport async function POST(request) {\n  try {\n    const { email, password } = await request.json();\n\n    // Validate required fields\n    if (!email || !password) {\n      return NextResponse.json(\n        { error: 'Please provide email and password' },\n        { status: 400 }\n      );\n    }\n\n    // Connect to database\n    await connectDB();\n\n    // Find user by email and include password for comparison\n    const user = await User.findOne({ email: email.toLowerCase() }).select('+password');\n    \n    if (!user) {\n      return NextResponse.json(\n        { error: 'Invalid email or password' },\n        { status: 401 }\n      );\n    }\n\n    // Check if user is active\n    if (!user.isActive) {\n      return NextResponse.json(\n        { error: 'Account is deactivated. Please contact support.' },\n        { status: 401 }\n      );\n    }\n\n    // Check password\n    const isPasswordValid = await user.comparePassword(password);\n    \n    if (!isPasswordValid) {\n      return NextResponse.json(\n        { error: 'Invalid email or password' },\n        { status: 401 }\n      );\n    }\n\n    // Update last login\n    user.lastLogin = new Date();\n    await user.save();\n\n    // Create JWT token\n    console.log('Creating token with userId:', user._id);\n    const token = jwt.sign(\n      { \n        userId: user._id.toString(),\n        email: user.email,\n        fullName: user.fullName\n      },\n      JWT_SECRET,\n      { expiresIn: '7d' }\n    );\n\n    // Create response\n    const response = NextResponse.json(\n      {\n        message: 'Login successful',\n        user: user.toPublicJSON(),\n        token,\n      },\n      { status: 200 }\n    );\n\n    // Set HTTP-only cookie for additional security\n    response.cookies.set('auth-token', token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n    });\n\n    return response;\n\n  } catch (error) {\n    console.error('Login error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEA,oDAAoD;AACpD,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAEtC,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE9C,2BAA2B;QAC3B,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAoC,GAC7C;gBAAE,QAAQ;YAAI;QAElB;QAEA,sBAAsB;QACtB,MAAM,CAAA,GAAA,gHAAA,CAAA,UAAS,AAAD;QAEd,yDAAyD;QACzD,MAAM,OAAO,MAAM,gHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAE,OAAO,MAAM,WAAW;QAAG,GAAG,MAAM,CAAC;QAEvE,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA4B,GACrC;gBAAE,QAAQ;YAAI;QAElB;QAEA,0BAA0B;QAC1B,IAAI,CAAC,KAAK,QAAQ,EAAE;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkD,GAC3D;gBAAE,QAAQ;YAAI;QAElB;QAEA,iBAAiB;QACjB,MAAM,kBAAkB,MAAM,KAAK,eAAe,CAAC;QAEnD,IAAI,CAAC,iBAAiB;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA4B,GACrC;gBAAE,QAAQ;YAAI;QAElB;QAEA,oBAAoB;QACpB,KAAK,SAAS,GAAG,IAAI;QACrB,MAAM,KAAK,IAAI;QAEf,mBAAmB;QACnB,QAAQ,GAAG,CAAC,+BAA+B,KAAK,GAAG;QACnD,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CACpB;YACE,QAAQ,KAAK,GAAG,CAAC,QAAQ;YACzB,OAAO,KAAK,KAAK;YACjB,UAAU,KAAK,QAAQ;QACzB,GACA,YACA;YAAE,WAAW;QAAK;QAGpB,kBAAkB;QAClB,MAAM,WAAW,gIAAA,CAAA,eAAY,CAAC,IAAI,CAChC;YACE,SAAS;YACT,MAAM,KAAK,YAAY;YACvB;QACF,GACA;YAAE,QAAQ;QAAI;QAGhB,+CAA+C;QAC/C,SAAS,OAAO,CAAC,GAAG,CAAC,cAAc,OAAO;YACxC,UAAU;YACV,QAAQ,oDAAyB;YACjC,UAAU;YACV,QAAQ,IAAI,KAAK,KAAK,KAAK;QAC7B;QAEA,OAAO;IAET,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}