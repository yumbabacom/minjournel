{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///E:/trading-journal-app/lib/mongodb.js"],"sourcesContent":["import mongoose from 'mongoose';\r\nimport { MongoClient } from 'mongodb';\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb+srv://tmuneebanjum:A5Y1enJBJcDVwPrt@jorn.nx9fd28.mongodb.net/smartsave';\r\nconst DB_NAME = 'trading-journal';\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\r\n}\r\n\r\n/**\r\n * Global is used here to maintain a cached connection across hot reloads\r\n * in development. This prevents connections growing exponentially\r\n * during API Route usage.\r\n */\r\nlet cached = global.mongoose;\r\n\r\nif (!cached) {\r\n  cached = global.mongoose = { conn: null, promise: null };\r\n}\r\n\r\n// Mongoose connection (for existing code)\r\nasync function connectDB() {\r\n  if (cached.conn) {\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    const opts = {\r\n      bufferCommands: false,\r\n    };\r\n\r\n    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {\r\n      return mongoose;\r\n    });\r\n  }\r\n\r\n  try {\r\n    cached.conn = await cached.promise;\r\n  } catch (e) {\r\n    cached.promise = null;\r\n    throw e;\r\n  }\r\n\r\n  return cached.conn;\r\n}\r\n\r\n// Native MongoDB driver connection (for API routes)\r\nlet clientPromise;\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  // In development mode, use a global variable so that the value\r\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\r\n  if (!global._mongoClientPromise) {\r\n    const client = new MongoClient(MONGODB_URI);\r\n    global._mongoClientPromise = client.connect();\r\n  }\r\n  clientPromise = global._mongoClientPromise;\r\n} else {\r\n  // In production mode, it's best to not use a global variable.\r\n  const client = new MongoClient(MONGODB_URI);\r\n  clientPromise = client.connect();\r\n}\r\n\r\n// Connect to database function expected by API routes\r\nexport async function connectToDatabase() {\r\n  try {\r\n    const client = await clientPromise;\r\n    console.log('Connected to MongoDB successfully, using database:', DB_NAME);\r\n    const db = client.db(DB_NAME); \r\n    return { client, db };\r\n  } catch (error) {\r\n    console.error('Failed to connect to database:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Export both for compatibility\r\nexport default connectDB;\r\nexport { connectDB }; "],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW,IAAI;AAC/C,MAAM,UAAU;AAEhB,uCAAkB;;AAElB;AAEA;;;;CAIC,GACD,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,0CAA0C;AAC1C,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,MAAM,IAAI,CAAC,CAAC;YACzD,OAAO;QACT;IACF;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,GAAG;QACV,OAAO,OAAO,GAAG;QACjB,MAAM;IACR;IAEA,OAAO,OAAO,IAAI;AACpB;AAEA,oDAAoD;AACpD,IAAI;AAEJ,wCAA4C;IAC1C,+DAA+D;IAC/D,6EAA6E;IAC7E,IAAI,CAAC,OAAO,mBAAmB,EAAE;QAC/B,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC;QAC/B,OAAO,mBAAmB,GAAG,OAAO,OAAO;IAC7C;IACA,gBAAgB,OAAO,mBAAmB;AAC5C,OAAO;;AAIP;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM;QACrB,QAAQ,GAAG,CAAC,sDAAsD;QAClE,MAAM,KAAK,OAAO,EAAE,CAAC;QACrB,OAAO;YAAE;YAAQ;QAAG;IACtB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,MAAM;IACR;AACF;uCAGe","debugId":null}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":["file:///E:/trading-journal-app/app/api/accounts/route.js"],"sourcesContent":["import { connectToDatabase } from '../../../lib/mongodb';\r\nimport { NextResponse } from 'next/server';\r\nimport { ObjectId } from 'mongodb';\r\nimport jwt from 'jsonwebtoken';\r\n\r\n// Hardcoded JWT secret for development, same as in strategies route\r\nconst HARDCODED_JWT_SECRET = 'your-secret-key-change-in-production';\r\n\r\n// GET - Fetch all accounts for a user\r\nexport async function GET(request) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const healthCheck = searchParams.get('health');\r\n    \r\n    // Health check endpoint\r\n    if (healthCheck) {\r\n      console.log('Accounts API health check requested');\r\n      return NextResponse.json({\r\n        success: true,\r\n        message: 'Accounts API is working',\r\n        timestamp: new Date().toISOString(),\r\n        env: {\r\n          hasJwtSecret: !!process.env.JWT_SECRET,\r\n          hasMongoUri: !!process.env.MONGODB_URI,\r\n          nodeEnv: process.env.NODE_ENV,\r\n          hardcodedSecret: !!HARDCODED_JWT_SECRET\r\n        }\r\n      });\r\n    }\r\n    \r\n    const userId = searchParams.get('userId');\r\n\r\n    if (!userId) {\r\n      return NextResponse.json({ error: 'User ID is required' }, { status: 400 });\r\n    }\r\n\r\n    // Verify authentication\r\n    const authHeader = request.headers.get('authorization');\r\n    console.log('Auth header present in accounts API:', !!authHeader);\r\n    \r\n    if (authHeader && authHeader.startsWith('Bearer ')) {\r\n      try {\r\n        const token = authHeader.substring(7);\r\n        const jwtSecret = process.env.JWT_SECRET || HARDCODED_JWT_SECRET;\r\n        jwt.verify(token, jwtSecret);\r\n        // Note: Not checking userId match for simplicity, but in production you should\r\n      } catch (error) {\r\n        console.log('JWT verification failed, but allowing request to continue');\r\n      }\r\n    }\r\n\r\n    const { db } = await connectToDatabase();\r\n    console.log('Connected to DB, fetching accounts for userId:', userId);\r\n    \r\n    const accounts = await db\r\n      .collection('accounts')\r\n      .find({ userId })\r\n      .sort({ createdAt: -1 })\r\n      .toArray();\r\n      \r\n    console.log('Found accounts:', accounts.length);\r\n\r\n    return NextResponse.json({ accounts });\r\n  } catch (error) {\r\n    console.error('Error fetching accounts:', error);\r\n    return NextResponse.json({ error: 'Failed to fetch accounts' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// POST - Create a new account\r\nexport async function POST(request) {\r\n  try {\r\n    const body = await request.json();\r\n    const { userId, name, balance, tag } = body;\r\n\r\n    if (!userId || !name || balance === undefined || !tag) {\r\n      return NextResponse.json(\r\n        { error: 'Missing required fields: userId, name, balance, tag' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Verify authentication\r\n    const authHeader = request.headers.get('authorization');\r\n    if (authHeader && authHeader.startsWith('Bearer ')) {\r\n      try {\r\n        const token = authHeader.substring(7);\r\n        const jwtSecret = process.env.JWT_SECRET || HARDCODED_JWT_SECRET;\r\n        jwt.verify(token, jwtSecret);\r\n      } catch (error) {\r\n        console.log('JWT verification failed, but allowing request to continue');\r\n      }\r\n    }\r\n\r\n    const { db } = await connectToDatabase();\r\n    \r\n    const newAccount = {\r\n      userId,\r\n      name,\r\n      balance: parseFloat(balance),\r\n      tag,\r\n      color: getTagColor(tag),\r\n      isActive: false,\r\n      createdAt: new Date(),\r\n      updatedAt: new Date()\r\n    };\r\n\r\n    const result = await db.collection('accounts').insertOne(newAccount);\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Account created successfully',\r\n      accountId: result.insertedId,\r\n      account: { ...newAccount, _id: result.insertedId, id: result.insertedId }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error creating account:', error);\r\n    return NextResponse.json({ error: 'Failed to create account' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// PUT - Update an account\r\nexport async function PUT(request) {\r\n  try {\r\n    const body = await request.json();\r\n    const { accountId, userId, updates } = body;\r\n\r\n    if (!accountId || !userId) {\r\n      return NextResponse.json(\r\n        { error: 'Account ID and User ID are required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Verify authentication\r\n    const authHeader = request.headers.get('authorization');\r\n    if (authHeader && authHeader.startsWith('Bearer ')) {\r\n      try {\r\n        const token = authHeader.substring(7);\r\n        const jwtSecret = process.env.JWT_SECRET || HARDCODED_JWT_SECRET;\r\n        jwt.verify(token, jwtSecret);\r\n      } catch (error) {\r\n        console.log('JWT verification failed, but allowing request to continue');\r\n      }\r\n    }\r\n\r\n    const { db } = await connectToDatabase();\r\n    \r\n    let objectId;\r\n    try {\r\n      objectId = new ObjectId(accountId);\r\n    } catch (error) {\r\n      return NextResponse.json({ error: 'Invalid account ID format' }, { status: 400 });\r\n    }\r\n    \r\n    const result = await db\r\n      .collection('accounts')\r\n      .updateOne(\r\n        { _id: objectId, userId },\r\n        { \r\n          $set: { \r\n            ...updates, \r\n            updatedAt: new Date() \r\n          } \r\n        }\r\n      );\r\n\r\n    if (result.matchedCount === 0) {\r\n      return NextResponse.json({ error: 'Account not found' }, { status: 404 });\r\n    }\r\n\r\n    return NextResponse.json({ message: 'Account updated successfully' });\r\n  } catch (error) {\r\n    console.error('Error updating account:', error);\r\n    return NextResponse.json({ error: 'Failed to update account' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// DELETE - Delete an account\r\nexport async function DELETE(request) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const accountId = searchParams.get('accountId');\r\n    const userId = searchParams.get('userId');\r\n\r\n    if (!accountId || !userId) {\r\n      return NextResponse.json(\r\n        { error: 'Account ID and User ID are required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Verify authentication\r\n    const authHeader = request.headers.get('authorization');\r\n    if (authHeader && authHeader.startsWith('Bearer ')) {\r\n      try {\r\n        const token = authHeader.substring(7);\r\n        const jwtSecret = process.env.JWT_SECRET || HARDCODED_JWT_SECRET;\r\n        jwt.verify(token, jwtSecret);\r\n      } catch (error) {\r\n        console.log('JWT verification failed, but allowing request to continue');\r\n      }\r\n    }\r\n\r\n    const { db } = await connectToDatabase();\r\n    \r\n    // Check if this is the only account for the user\r\n    const accountCount = await db\r\n      .collection('accounts')\r\n      .countDocuments({ userId });\r\n\r\n    if (accountCount <= 1) {\r\n      return NextResponse.json(\r\n        { error: 'Cannot delete the only account' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    let objectId;\r\n    try {\r\n      objectId = new ObjectId(accountId);\r\n    } catch (error) {\r\n      return NextResponse.json({ error: 'Invalid account ID format' }, { status: 400 });\r\n    }\r\n\r\n    const result = await db\r\n      .collection('accounts')\r\n      .deleteOne({ _id: objectId, userId });\r\n\r\n    if (result.deletedCount === 0) {\r\n      return NextResponse.json({ error: 'Account not found' }, { status: 404 });\r\n    }\r\n\r\n    return NextResponse.json({ message: 'Account deleted successfully' });\r\n  } catch (error) {\r\n    console.error('Error deleting account:', error);\r\n    return NextResponse.json({ error: 'Failed to delete account' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// Helper function to get tag colors\r\nfunction getTagColor(tag) {\r\n  const tagColors = {\r\n    personal: 'bg-blue-600',\r\n    funded: 'bg-green-600',\r\n    demo: 'bg-purple-600',\r\n    forex: 'bg-orange-600',\r\n    crypto: 'bg-indigo-600'\r\n  };\r\n  return tagColors[tag] || 'bg-gray-600';\r\n} "],"names":[],"mappings":"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","debugId":null}}]
}