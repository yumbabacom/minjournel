{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file:///E:/trading-journal-app/lib/economicCalendarScraper.js"],"sourcesContent":["const puppeteer = require('puppeteer');\nconst fs = require('fs');\nconst path = require('path');\n\nclass EconomicCalendarScraper {\n  constructor() {\n    this.browser = null;\n    this.csvFilePath = path.join(process.cwd(), 'data', 'economic_calendar.csv');\n    this.dataDir = path.join(process.cwd(), 'data');\n  }\n\n  // Get current time in GMT-4 timezone\n  getCurrentGMT4Time() {\n    const now = new Date();\n    const gmt4Offset = -4 * 60; // GMT-4 in minutes\n    const gmt4Time = new Date(now.getTime() + (gmt4Offset * 60 * 1000));\n    return gmt4Time;\n  }\n\n  // Ensure data directory exists\n  ensureDataDirectory() {\n    if (!fs.existsSync(this.dataDir)) {\n      fs.mkdirSync(this.dataDir, { recursive: true });\n    }\n  }\n\n  async initialize() {\n    if (!this.browser) {\n      this.browser = await puppeteer.launch({\n        headless: true,\n        defaultViewport: null,\n        args: [\n          '--no-sandbox', \n          '--disable-setuid-sandbox', \n          '--disable-web-security', \n          '--disable-dev-shm-usage',\n          '--disable-gpu',\n          '--no-first-run'\n        ]\n      });\n    }\n  }\n\n  async scrapeEconomicCalendar() {\n    console.log('Starting economic calendar scraper...');\n    \n    await this.initialize();\n\n    try {\n      const page = await this.browser.newPage();\n      \n      // Set user agent\n      await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');\n      \n      console.log('Navigating to investing.com economic calendar...');\n      await page.goto('https://www.investing.com/economic-calendar/', {\n        waitUntil: 'domcontentloaded',\n        timeout: 60000\n      });\n\n      // Wait for page to load completely\n      await new Promise(resolve => setTimeout(resolve, 8000));\n\n      console.log('Extracting economic calendar data...');\n      \n      const calendarData = await page.evaluate(() => {\n        const data = [];\n        \n        // Function to get impact level from various indicators\n        function getImpactLevel(row) {\n          const impactSelectors = [\n            '.grayFullBullishIcon',\n            '.orangeFullBullishIcon', \n            '.redFullBullishIcon',\n            '.impact',\n            '.bull',\n            '[class*=\"bull\"]',\n            '[class*=\"impact\"]'\n          ];\n          \n          let impactLevel = 0;\n          \n          // Count bull icons\n          impactSelectors.forEach(selector => {\n            const elements = row.querySelectorAll(selector);\n            if (elements.length > impactLevel) {\n              impactLevel = elements.length;\n            }\n          });\n          \n          // Also check for text-based impact indicators\n          const impactCell = row.querySelector('td:nth-child(3), .impact, [data-impact]');\n          if (impactCell) {\n            const text = impactCell.textContent.trim().toLowerCase();\n            if (text.includes('high') || text.includes('3')) impactLevel = 3;\n            else if (text.includes('medium') || text.includes('2')) impactLevel = 2;\n            else if (text.includes('low') || text.includes('1')) impactLevel = 1;\n          }\n          \n          return impactLevel;\n        }\n        \n        // Try different table selectors\n        const tableSelectors = [\n          '#economicCalendarData tr',\n          '.ec-table-row',\n          'tr[event_attr_id]',\n          'table tr',\n          '.calendar-row'\n        ];\n        \n        for (const selector of tableSelectors) {\n          try {\n            const rows = document.querySelectorAll(selector);\n            console.log(`Trying selector: ${selector}, found ${rows.length} rows`);\n            \n            if (rows.length > 0) {\n              rows.forEach((row, index) => {\n                try {\n                  // Skip header rows\n                  if (row.querySelector('th')) return;\n                  \n                  const cells = row.querySelectorAll('td');\n                  if (cells.length < 4) return;\n                  \n                  // Extract basic data\n                  const time = cells[0] ? cells[0].textContent.trim() : '';\n                  const currency = cells[1] ? cells[1].textContent.trim() : '';\n                  const impact = getImpactLevel(row);\n                  \n                  // Look for event name\n                  let event = '';\n                  for (let i = 2; i < cells.length; i++) {\n                    const cellText = cells[i].textContent.trim();\n                    if (cellText.length > 10 && !cellText.match(/^[\\d\\.\\-\\+%]+$/)) {\n                      event = cellText;\n                      break;\n                    }\n                  }\n                  \n                  // Extract actual, forecast, previous values\n                  const values = [];\n                  for (let i = 3; i < Math.min(cells.length, 7); i++) {\n                    values.push(cells[i] ? cells[i].textContent.trim() : '');\n                  }\n                  \n                  if (event && event.length > 0) {\n                    data.push({\n                      time: time,\n                      currency: currency,\n                      impact: impact,\n                      event: event,\n                      actual: values[0] || '',\n                      forecast: values[1] || '',\n                      previous: values[2] || ''\n                    });\n                  }\n                } catch (e) {\n                  console.log(`Error processing row ${index}:`, e.message);\n                }\n              });\n              \n              if (data.length > 0) {\n                console.log(`Successfully extracted ${data.length} events`);\n                break;\n              }\n            }\n          } catch (e) {\n            console.log(`Selector ${selector} failed:`, e.message);\n          }\n        }\n        \n        return data;\n      });\n\n      await page.close();\n\n      console.log(`Extracted ${calendarData.length} economic events`);\n\n      if (calendarData.length > 0) {\n        // Clean and format the data for our application\n        const cleanedData = calendarData.map((event, index) => ({\n          id: index + 1,\n          time: event.time,\n          currency: event.currency,\n          event: event.event,\n          description: this.generateDescription(event.event),\n          importance: this.mapImpactLevel(event.impact),\n          forecast: event.forecast || null,\n          previous: event.previous || null,\n          actual: event.actual || null\n        }));\n\n        return cleanedData;\n      } else {\n        console.log('No data found');\n        return [];\n      }\n\n    } catch (error) {\n      console.error('Error during scraping:', error);\n      throw error;\n    }\n  }\n\n  mapImpactLevel(impact) {\n    if (impact >= 3) return 'high';\n    if (impact >= 2) return 'medium';\n    if (impact >= 1) return 'low';\n    return 'low';\n  }\n\n  generateDescription(eventName) {\n    const descriptions = {\n      'CPI': 'Consumer Price Index measures inflation',\n      'GDP': 'Gross Domestic Product measures economic growth',\n      'NFP': 'Non-Farm Payrolls measures employment change',\n      'Interest Rate': 'Central bank interest rate decision',\n      'PMI': 'Purchasing Managers Index measures economic activity',\n      'Unemployment': 'Unemployment rate measures job market health',\n      'Retail Sales': 'Retail sales measures consumer spending',\n      'Industrial Production': 'Industrial production measures manufacturing output'\n    };\n\n    for (const [key, desc] of Object.entries(descriptions)) {\n      if (eventName.toLowerCase().includes(key.toLowerCase())) {\n        return desc;\n      }\n    }\n\n    return `Economic indicator: ${eventName}`;\n  }\n\n  // Save data to CSV\n  saveToCSV(data) {\n    try {\n      this.ensureDataDirectory();\n\n      // Create CSV header\n      const csvHeader = 'ID,Time,Currency,Event,Description,Importance,Forecast,Previous,Actual,Timestamp\\n';\n\n      // Convert data to CSV rows\n      const csvRows = data.map(event => {\n        const timestamp = new Date().toISOString();\n        return [\n          event.id,\n          `\"${event.time}\"`,\n          `\"${event.currency}\"`,\n          `\"${event.event.replace(/\"/g, '\"\"')}\"`,\n          `\"${event.description.replace(/\"/g, '\"\"')}\"`,\n          `\"${event.importance}\"`,\n          `\"${event.forecast || ''}\"`,\n          `\"${event.previous || ''}\"`,\n          `\"${event.actual || ''}\"`,\n          `\"${timestamp}\"`\n        ].join(',');\n      }).join('\\n');\n\n      const csvContent = csvHeader + csvRows;\n\n      fs.writeFileSync(this.csvFilePath, csvContent, 'utf8');\n      console.log(`‚úÖ Economic calendar data saved to ${this.csvFilePath}`);\n\n      return true;\n    } catch (error) {\n      console.error('‚ùå Error saving to CSV:', error);\n      return false;\n    }\n  }\n\n  // Load data from CSV\n  loadFromCSV() {\n    try {\n      if (!fs.existsSync(this.csvFilePath)) {\n        console.log('üìÑ No CSV file found, will need to scrape fresh data');\n        return null;\n      }\n\n      const csvContent = fs.readFileSync(this.csvFilePath, 'utf8');\n      const lines = csvContent.split('\\n');\n\n      if (lines.length < 2) {\n        console.log('üìÑ CSV file is empty or invalid');\n        return null;\n      }\n\n      // Skip header and parse data\n      const data = [];\n      for (let i = 1; i < lines.length; i++) {\n        const line = lines[i].trim();\n        if (!line) continue;\n\n        try {\n          // Parse CSV line (handling quoted fields)\n          const fields = this.parseCSVLine(line);\n\n          if (fields.length >= 9) {\n            data.push({\n              id: parseInt(fields[0]) || data.length + 1,\n              time: fields[1],\n              currency: fields[2],\n              event: fields[3],\n              description: fields[4],\n              importance: fields[5],\n              forecast: fields[6] || null,\n              previous: fields[7] || null,\n              actual: fields[8] || null\n            });\n          }\n        } catch (error) {\n          console.log(`‚ö†Ô∏è Error parsing CSV line ${i}: ${error.message}`);\n        }\n      }\n\n      if (data.length > 0) {\n        console.log(`‚úÖ Loaded ${data.length} events from CSV file`);\n        return data;\n      } else {\n        console.log('üìÑ No valid data found in CSV file');\n        return null;\n      }\n    } catch (error) {\n      console.error('‚ùå Error loading from CSV:', error);\n      return null;\n    }\n  }\n\n  // Parse CSV line handling quoted fields\n  parseCSVLine(line) {\n    const fields = [];\n    let current = '';\n    let inQuotes = false;\n    let i = 0;\n\n    while (i < line.length) {\n      const char = line[i];\n\n      if (char === '\"') {\n        if (inQuotes && line[i + 1] === '\"') {\n          // Escaped quote\n          current += '\"';\n          i += 2;\n        } else {\n          // Toggle quote state\n          inQuotes = !inQuotes;\n          i++;\n        }\n      } else if (char === ',' && !inQuotes) {\n        // Field separator\n        fields.push(current);\n        current = '';\n        i++;\n      } else {\n        current += char;\n        i++;\n      }\n    }\n\n    // Add the last field\n    fields.push(current);\n\n    return fields;\n  }\n\n  // Check if CSV data is from today (GMT-4 timezone)\n  isCSVDataFromToday() {\n    try {\n      if (!fs.existsSync(this.csvFilePath)) {\n        console.log('üìÑ No CSV file exists');\n        return false;\n      }\n\n      const stats = fs.statSync(this.csvFilePath);\n      const fileModifiedTime = new Date(stats.mtime);\n\n      // Get current time in GMT-4 (EDT/EST)\n      const now = new Date();\n      const gmt4Offset = -4 * 60; // GMT-4 in minutes\n      const currentGMT4 = new Date(now.getTime() + (gmt4Offset * 60 * 1000));\n\n      // Get file modified time in GMT-4\n      const fileGMT4 = new Date(fileModifiedTime.getTime() + (gmt4Offset * 60 * 1000));\n\n      // Check if both dates are on the same day in GMT-4\n      const currentDay = currentGMT4.toDateString();\n      const fileDay = fileGMT4.toDateString();\n\n      const isSameDay = currentDay === fileDay;\n\n      console.log(`üìÖ Current GMT-4 day: ${currentDay}`);\n      console.log(`üìÖ CSV file day: ${fileDay}`);\n      console.log(`üìÖ Is same day: ${isSameDay}`);\n\n      return isSameDay;\n    } catch (error) {\n      console.error('‚ùå Error checking CSV date:', error);\n      return false;\n    }\n  }\n\n  // Check if it's time to run daily scraper (after GMT-4 day ends)\n  shouldRunDailyScraper() {\n    try {\n      // Get current time in GMT-4\n      const now = new Date();\n      const gmt4Offset = -4 * 60; // GMT-4 in minutes\n      const currentGMT4 = new Date(now.getTime() + (gmt4Offset * 60 * 1000));\n\n      // Check if we have data from today\n      const hasDataFromToday = this.isCSVDataFromToday();\n\n      // If we don't have data from today, we should scrape\n      if (!hasDataFromToday) {\n        console.log('üïê No data from today (GMT-4), should scrape');\n        return true;\n      }\n\n      // If we have data from today, don't scrape again\n      console.log('‚úÖ Already have data from today (GMT-4), no need to scrape');\n      return false;\n    } catch (error) {\n      console.error('‚ùå Error checking if should run daily scraper:', error);\n      return false;\n    }\n  }\n\n  // Main method to get economic calendar data (CSV first, then scrape daily)\n  async getEconomicCalendarData(forceRefresh = false) {\n    try {\n      console.log('üîç Checking economic calendar data availability...');\n\n      // If force refresh is requested, scrape new data\n      if (forceRefresh) {\n        console.log('üîÑ Force refresh requested, scraping new data...');\n        const scrapedData = await this.scrapeEconomicCalendar();\n\n        if (scrapedData && scrapedData.length > 0) {\n          this.saveToCSV(scrapedData);\n          return {\n            data: scrapedData,\n            source: 'scraped_force',\n            timestamp: new Date().toISOString()\n          };\n        }\n      }\n\n      // Check if we have data from today (GMT-4)\n      if (this.isCSVDataFromToday()) {\n        const csvData = this.loadFromCSV();\n        if (csvData && csvData.length > 0) {\n          console.log('üìä Using existing CSV data from today (GMT-4)');\n          return {\n            data: csvData,\n            source: 'csv_today',\n            timestamp: new Date().toISOString()\n          };\n        }\n      }\n\n      // Check if we should run daily scraper\n      if (this.shouldRunDailyScraper()) {\n        console.log('üï∑Ô∏è Running daily scraper for new GMT-4 day...');\n        const scrapedData = await this.scrapeEconomicCalendar();\n\n        if (scrapedData && scrapedData.length > 0) {\n          // Save to CSV for the rest of the day\n          this.saveToCSV(scrapedData);\n          console.log('‚úÖ Daily scraping completed and saved to CSV');\n\n          return {\n            data: scrapedData,\n            source: 'scraped_daily',\n            timestamp: new Date().toISOString()\n          };\n        } else {\n          console.log('‚ö†Ô∏è Daily scraping failed, trying existing CSV data...');\n        }\n      }\n\n      // Fallback: try to load any existing CSV data\n      const csvData = this.loadFromCSV();\n      if (csvData && csvData.length > 0) {\n        console.log('üìÑ Using existing CSV data as fallback');\n        return {\n          data: csvData,\n          source: 'csv_fallback',\n          timestamp: new Date().toISOString()\n        };\n      }\n\n      // No data available\n      console.log('‚ùå No economic calendar data available');\n      return {\n        data: [],\n        source: 'none',\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('‚ùå Error getting economic calendar data:', error);\n\n      // Try CSV fallback on error\n      const csvData = this.loadFromCSV();\n      if (csvData && csvData.length > 0) {\n        console.log('üîß Using CSV fallback due to error');\n        return {\n          data: csvData,\n          source: 'csv_error_fallback',\n          timestamp: new Date().toISOString()\n        };\n      }\n\n      return {\n        data: [],\n        source: 'error',\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n\n  async close() {\n    if (this.browser) {\n      await this.browser.close();\n      this.browser = null;\n    }\n  }\n}\n\nmodule.exports = EconomicCalendarScraper;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 539, "column": 0}, "map": {"version":3,"sources":["file:///E:/trading-journal-app/lib/backgroundScraper.js"],"sourcesContent":["const EconomicCalendarScraper = require('./economicCalendarScraper');\n\nclass BackgroundScraper {\n  constructor() {\n    this.isRunning = false;\n    this.scraper = null;\n    this.lastRunTime = null;\n    this.runInterval = 30 * 60 * 1000; // 30 minutes\n  }\n\n  async initialize() {\n    if (!this.scraper) {\n      this.scraper = new EconomicCalendarScraper();\n    }\n  }\n\n  async runScraper() {\n    if (this.isRunning) {\n      console.log('üîÑ Scraper already running, skipping...');\n      return;\n    }\n\n    try {\n      this.isRunning = true;\n      console.log('üöÄ Starting background economic calendar scraper...');\n      \n      await this.initialize();\n      \n      // Check if we need to scrape (no data from today in GMT-4)\n      if (this.scraper.shouldRunDailyScraper()) {\n        console.log('üìä No data from today (GMT-4), scraping fresh data...');\n        \n        const result = await this.scraper.getEconomicCalendarData(true);\n        \n        if (result.data && result.data.length > 0) {\n          console.log(`‚úÖ Background scraper completed: ${result.data.length} events from ${result.source}`);\n          this.lastRunTime = Date.now();\n          \n          // Log some statistics\n          const highImpact = result.data.filter(e => e.importance === 'high').length;\n          const mediumImpact = result.data.filter(e => e.importance === 'medium').length;\n          const lowImpact = result.data.filter(e => e.importance === 'low').length;\n          \n          console.log(`üìà Impact distribution: ${highImpact} high, ${mediumImpact} medium, ${lowImpact} low`);\n          \n          return {\n            success: true,\n            eventsCount: result.data.length,\n            source: result.source,\n            timestamp: result.timestamp\n          };\n        } else {\n          console.log('‚ö†Ô∏è Background scraper returned no data');\n          return {\n            success: false,\n            error: 'No data scraped',\n            eventsCount: 0\n          };\n        }\n      } else {\n        console.log('‚úÖ Already have data from today (GMT-4), no scraping needed');\n        const csvData = this.scraper.loadFromCSV();\n        return {\n          success: true,\n          eventsCount: csvData ? csvData.length : 0,\n          source: 'csv_fresh',\n          timestamp: new Date().toISOString()\n        };\n      }\n    } catch (error) {\n      console.error('‚ùå Background scraper error:', error);\n      return {\n        success: false,\n        error: error.message,\n        eventsCount: 0\n      };\n    } finally {\n      this.isRunning = false;\n    }\n  }\n\n  // Start periodic scraping\n  startPeriodicScraping() {\n    console.log('‚è∞ Starting periodic economic calendar scraping...');\n    \n    // Run immediately\n    this.runScraper();\n    \n    // Then run every 30 minutes\n    setInterval(() => {\n      this.runScraper();\n    }, this.runInterval);\n  }\n\n  // Run scraper on dashboard load\n  async runOnDashboardLoad() {\n    console.log('üè† Dashboard loaded, checking economic calendar data...');\n    \n    try {\n      await this.initialize();\n      \n      // Always try to get data (will use CSV if fresh, scrape if needed)\n      const result = await this.scraper.getEconomicCalendarData(false);\n      \n      console.log(`üìä Dashboard load: Got ${result.data.length} events from ${result.source}`);\n      \n      // If we should run daily scraper, trigger background scraping\n      if (this.scraper.shouldRunDailyScraper() && !this.isRunning) {\n        console.log('üîÑ Triggering background scrape for fresh data...');\n        // Run in background without waiting\n        this.runScraper().catch(error => {\n          console.error('‚ùå Background scrape failed:', error);\n        });\n      }\n      \n      return result;\n    } catch (error) {\n      console.error('‚ùå Dashboard load scraper error:', error);\n      return {\n        data: [],\n        source: 'error',\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n\n  async close() {\n    if (this.scraper) {\n      await this.scraper.close();\n      this.scraper = null;\n    }\n  }\n\n  // Get scraper status\n  getStatus() {\n    return {\n      isRunning: this.isRunning,\n      lastRunTime: this.lastRunTime,\n      hasCSVData: this.scraper ? this.scraper.isCSVDataFromToday() : false\n    };\n  }\n}\n\n// Singleton instance\nlet backgroundScraperInstance = null;\n\nfunction getBackgroundScraper() {\n  if (!backgroundScraperInstance) {\n    backgroundScraperInstance = new BackgroundScraper();\n  }\n  return backgroundScraperInstance;\n}\n\nmodule.exports = {\n  BackgroundScraper,\n  getBackgroundScraper\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 677, "column": 0}, "map": {"version":3,"sources":["file:///E:/trading-journal-app/app/api/scraper/dashboard-load/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\n\nexport async function POST(request) {\n  try {\n    console.log('üè† Dashboard load scraper triggered');\n    \n    // Dynamic import to avoid issues\n    const { getBackgroundScraper } = require('../../../../lib/backgroundScraper');\n    const backgroundScraper = getBackgroundScraper();\n    \n    // Run scraper on dashboard load\n    const result = await backgroundScraper.runOnDashboardLoad();\n    \n    return NextResponse.json({\n      success: true,\n      message: 'Dashboard load scraper completed',\n      data: {\n        eventsCount: result.data.length,\n        source: result.source,\n        timestamp: result.timestamp,\n        scraperStatus: backgroundScraper.getStatus()\n      }\n    });\n  } catch (error) {\n    console.error('‚ùå Dashboard load scraper error:', error);\n    \n    return NextResponse.json({\n      success: false,\n      error: 'Dashboard load scraper failed',\n      details: error.message\n    }, { status: 500 });\n  }\n}\n\nexport async function GET(request) {\n  try {\n    // Get scraper status\n    const { getBackgroundScraper } = require('../../../../lib/backgroundScraper');\n    const backgroundScraper = getBackgroundScraper();\n    \n    return NextResponse.json({\n      success: true,\n      status: backgroundScraper.getStatus()\n    });\n  } catch (error) {\n    console.error('‚ùå Error getting scraper status:', error);\n    \n    return NextResponse.json({\n      success: false,\n      error: 'Failed to get scraper status'\n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;;AAEO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,QAAQ,GAAG,CAAC;QAEZ,iCAAiC;QACjC,MAAM,EAAE,oBAAoB,EAAE;QAC9B,MAAM,oBAAoB;QAE1B,gCAAgC;QAChC,MAAM,SAAS,MAAM,kBAAkB,kBAAkB;QAEzD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,MAAM;gBACJ,aAAa,OAAO,IAAI,CAAC,MAAM;gBAC/B,QAAQ,OAAO,MAAM;gBACrB,WAAW,OAAO,SAAS;gBAC3B,eAAe,kBAAkB,SAAS;YAC5C;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QAEjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO;YACP,SAAS,MAAM,OAAO;QACxB,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF;AAEO,eAAe,IAAI,OAAO;IAC/B,IAAI;QACF,qBAAqB;QACrB,MAAM,EAAE,oBAAoB,EAAE;QAC9B,MAAM,oBAAoB;QAE1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,QAAQ,kBAAkB,SAAS;QACrC;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QAEjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO;QACT,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}