{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///E:/trading-journal-app/lib/mongodb.js"],"sourcesContent":["import mongoose from 'mongoose';\r\nimport { MongoClient } from 'mongodb';\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb+srv://tmuneebanjum:A5Y1enJBJcDVwPrt@jorn.nx9fd28.mongodb.net/smartsave';\r\nconst DB_NAME = 'trading-journal';\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\r\n}\r\n\r\n/**\r\n * Global is used here to maintain a cached connection across hot reloads\r\n * in development. This prevents connections growing exponentially\r\n * during API Route usage.\r\n */\r\nlet cached = global.mongoose;\r\n\r\nif (!cached) {\r\n  cached = global.mongoose = { conn: null, promise: null };\r\n}\r\n\r\n// Mongoose connection (for existing code)\r\nasync function connectDB() {\r\n  if (cached.conn) {\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    const opts = {\r\n      bufferCommands: false,\r\n    };\r\n\r\n    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {\r\n      return mongoose;\r\n    });\r\n  }\r\n\r\n  try {\r\n    cached.conn = await cached.promise;\r\n  } catch (e) {\r\n    cached.promise = null;\r\n    throw e;\r\n  }\r\n\r\n  return cached.conn;\r\n}\r\n\r\n// Native MongoDB driver connection (for API routes)\r\nlet clientPromise;\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  // In development mode, use a global variable so that the value\r\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\r\n  if (!global._mongoClientPromise) {\r\n    const client = new MongoClient(MONGODB_URI);\r\n    global._mongoClientPromise = client.connect();\r\n  }\r\n  clientPromise = global._mongoClientPromise;\r\n} else {\r\n  // In production mode, it's best to not use a global variable.\r\n  const client = new MongoClient(MONGODB_URI);\r\n  clientPromise = client.connect();\r\n}\r\n\r\n// Connect to database function expected by API routes\r\nexport async function connectToDatabase() {\r\n  try {\r\n    const client = await clientPromise;\r\n    console.log('Connected to MongoDB successfully, using database:', DB_NAME);\r\n    const db = client.db(DB_NAME); \r\n    return { client, db };\r\n  } catch (error) {\r\n    console.error('Failed to connect to database:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Export both for compatibility\r\nexport default connectDB;\r\nexport { connectDB }; "],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW,IAAI;AAC/C,MAAM,UAAU;AAEhB,uCAAkB;;AAElB;AAEA;;;;CAIC,GACD,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,0CAA0C;AAC1C,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,MAAM,IAAI,CAAC,CAAC;YACzD,OAAO;QACT;IACF;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,GAAG;QACV,OAAO,OAAO,GAAG;QACjB,MAAM;IACR;IAEA,OAAO,OAAO,IAAI;AACpB;AAEA,oDAAoD;AACpD,IAAI;AAEJ,wCAA4C;IAC1C,+DAA+D;IAC/D,6EAA6E;IAC7E,IAAI,CAAC,OAAO,mBAAmB,EAAE;QAC/B,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC;QAC/B,OAAO,mBAAmB,GAAG,OAAO,OAAO;IAC7C;IACA,gBAAgB,OAAO,mBAAmB;AAC5C,OAAO;;AAIP;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM;QACrB,QAAQ,GAAG,CAAC,sDAAsD;QAClE,MAAM,KAAK,OAAO,EAAE,CAAC;QACrB,OAAO;YAAE;YAAQ;QAAG;IACtB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,MAAM;IACR;AACF;uCAGe","debugId":null}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":["file:///E:/trading-journal-app/app/api/strategies/route.js"],"sourcesContent":["import { connectToDatabase } from '../../../lib/mongodb';\r\nimport { NextResponse } from 'next/server';\r\nimport { ObjectId } from 'mongodb';\r\nimport jwt from 'jsonwebtoken';\r\n\r\n// Hardcoded JWT secret for development\r\nconst HARDCODED_JWT_SECRET = 'your-secret-key-change-in-production';\r\n\r\n// Simple health check - you can test this by visiting /api/strategies?health=true\r\n// GET - Fetch all strategies for a user or health check\r\nexport async function GET(request) {\r\n  const { searchParams } = new URL(request.url);\r\n  const healthCheck = searchParams.get('health');\r\n  \r\n  // Health check endpoint\r\n  if (healthCheck) {\r\n    console.log('Health check requested');\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'API is working',\r\n      timestamp: new Date().toISOString(),\r\n      env: {\r\n        hasJwtSecret: !!process.env.JWT_SECRET,\r\n        hasMongoUri: !!process.env.MONGODB_URI,\r\n        nodeEnv: process.env.NODE_ENV,\r\n        hardcodedSecret: !!HARDCODED_JWT_SECRET\r\n      }\r\n    });\r\n  }\r\n\r\n  console.log('API /api/strategies GET called');\r\n  \r\n  try {\r\n    // Get token from Authorization header\r\n    const authHeader = request.headers.get('authorization');\r\n    console.log('Auth header present:', !!authHeader);\r\n    \r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n      console.log('No valid auth header found');\r\n      return NextResponse.json({ \r\n        success: false, \r\n        message: 'No token provided' \r\n      }, { status: 401 });\r\n    }\r\n\r\n    const token = authHeader.substring(7);\r\n    console.log('Token extracted, length:', token.length);\r\n    \r\n    // Verify token\r\n    let decoded;\r\n    try {\r\n      // Try with environment variable first, then fallback to hardcoded secret\r\n      const jwtSecret = process.env.JWT_SECRET || HARDCODED_JWT_SECRET;\r\n      console.log('Using JWT secret:', jwtSecret ? 'Secret found' : 'No secret available');\r\n      \r\n      decoded = jwt.verify(token, jwtSecret);\r\n      console.log('Token decoded successfully:', decoded);\r\n    } catch (jwtError) {\r\n      console.error('JWT verification error:', jwtError);\r\n      return NextResponse.json({ \r\n        success: false, \r\n        message: 'Invalid token: ' + jwtError.message\r\n      }, { status: 401 });\r\n    }\r\n    \r\n    const userId = decoded.userId;\r\n    console.log('Token verified, userId:', userId);\r\n\r\n    if (!userId) {\r\n      console.log('No userId in token');\r\n      return NextResponse.json({ \r\n        success: false, \r\n        message: 'Invalid token - no user ID' \r\n      }, { status: 401 });\r\n    }\r\n\r\n    // Connect to MongoDB using the proper connection function\r\n    console.log('Attempting to connect to MongoDB...');\r\n    const { db } = await connectToDatabase();\r\n    console.log('MongoDB connected successfully');\r\n    \r\n    const strategiesCollection = db.collection('strategies');\r\n\r\n    // Fetch user's strategies\r\n    console.log('Fetching strategies for user:', userId);\r\n    const strategies = await strategiesCollection\r\n      .find({ userId: userId.toString() })\r\n      .sort({ createdAt: -1 })\r\n      .toArray();\r\n\r\n    console.log('Found strategies:', strategies.length);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      strategies: strategies || []\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in /api/strategies GET:', error);\r\n    \r\n    // Return proper JSON error response\r\n    if (error.name === 'JsonWebTokenError') {\r\n      console.log('JWT Error:', error.message);\r\n      return NextResponse.json({\r\n        success: false,\r\n        message: 'Invalid token: ' + error.message\r\n      }, { status: 401 });\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: false,\r\n      message: 'Failed to fetch strategies',\r\n      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// POST - Create a new strategy\r\nexport async function POST(request) {\r\n  try {\r\n    const body = await request.json();\r\n    const { userId, name, marketType, tradingStyle, description, entryConditions, exitConditions, stopLossLogic, takeProfitLogic, riskPerTrade, maxDailyRisk, maxOpenTrades, positionSizing, indicators, toolsPatterns, tags, status, version } = body;\r\n\r\n    if (!userId || !name || !marketType || !tradingStyle) {\r\n      return NextResponse.json({ error: 'Required fields missing' }, { status: 400 });\r\n    }\r\n\r\n    const { db } = await connectToDatabase();\r\n    \r\n    const strategyData = {\r\n      userId,\r\n      name,\r\n      marketType,\r\n      tradingStyle,\r\n      description,\r\n      entryConditions,\r\n      exitConditions,\r\n      stopLossLogic,\r\n      takeProfitLogic,\r\n      riskPerTrade,\r\n      maxDailyRisk,\r\n      maxOpenTrades,\r\n      positionSizing,\r\n      indicators,\r\n      toolsPatterns,\r\n      tags,\r\n      status: status || 'testing',\r\n      version: version || '1.0',\r\n      createdAt: new Date(),\r\n      updatedAt: new Date()\r\n    };\r\n\r\n    const result = await db.collection('strategies').insertOne(strategyData);\r\n\r\n    return NextResponse.json({ \r\n      success: true, \r\n      strategyId: result.insertedId,\r\n      message: 'Strategy created successfully'\r\n    });\r\n  } catch (error) {\r\n    console.error('Error creating strategy:', error);\r\n    return NextResponse.json({ error: 'Failed to create strategy' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// PUT - Update an existing strategy\r\nexport async function PUT(request) {\r\n  try {\r\n    const body = await request.json();\r\n    const { strategyId, userId, _id, createdAt, ...updateData } = body;\r\n\r\n    if (!strategyId || !userId) {\r\n      return NextResponse.json({ error: 'Strategy ID and User ID are required' }, { status: 400 });\r\n    }\r\n\r\n    // Remove any immutable fields that shouldn't be updated\r\n    const { _id: removeId, userId: removeUserId, createdAt: removeCreatedAt, ...cleanUpdateData } = updateData;\r\n\r\n    const { db } = await connectToDatabase();\r\n    \r\n    const result = await db.collection('strategies').updateOne(\r\n      { _id: new ObjectId(strategyId), userId },\r\n      { \r\n        $set: { \r\n          ...cleanUpdateData, \r\n          updatedAt: new Date() \r\n        } \r\n      }\r\n    );\r\n\r\n    if (result.matchedCount === 0) {\r\n      return NextResponse.json({ error: 'Strategy not found' }, { status: 404 });\r\n    }\r\n\r\n    return NextResponse.json({ \r\n      success: true, \r\n      message: 'Strategy updated successfully' \r\n    });\r\n  } catch (error) {\r\n    console.error('Error updating strategy:', error);\r\n    return NextResponse.json({ error: 'Failed to update strategy' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// DELETE - Delete a strategy\r\nexport async function DELETE(request) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const strategyId = searchParams.get('strategyId');\r\n    const userId = searchParams.get('userId');\r\n\r\n    if (!strategyId || !userId) {\r\n      return NextResponse.json({ error: 'Strategy ID and User ID are required' }, { status: 400 });\r\n    }\r\n\r\n    const { db } = await connectToDatabase();\r\n    \r\n    const result = await db.collection('strategies').deleteOne({\r\n      _id: new ObjectId(strategyId),\r\n      userId\r\n    });\r\n\r\n    if (result.deletedCount === 0) {\r\n      return NextResponse.json({ error: 'Strategy not found' }, { status: 404 });\r\n    }\r\n\r\n    return NextResponse.json({ \r\n      success: true, \r\n      message: 'Strategy deleted successfully' \r\n    });\r\n  } catch (error) {\r\n    console.error('Error deleting strategy:', error);\r\n    return NextResponse.json({ error: 'Failed to delete strategy' }, { status: 500 });\r\n  }\r\n} "],"names":[],"mappings":"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","debugId":null}}]
}