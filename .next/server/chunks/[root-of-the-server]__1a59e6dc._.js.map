{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///E:/trading-journal-app/lib/mongodb.js"],"sourcesContent":["import mongoose from 'mongoose';\r\nimport { MongoClient } from 'mongodb';\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb+srv://tmuneebanjum:A5Y1enJBJcDVwPrt@jorn.nx9fd28.mongodb.net/smartsave';\r\nconst DB_NAME = 'trading-journal';\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\r\n}\r\n\r\n/**\r\n * Global is used here to maintain a cached connection across hot reloads\r\n * in development. This prevents connections growing exponentially\r\n * during API Route usage.\r\n */\r\nlet cached = global.mongoose;\r\n\r\nif (!cached) {\r\n  cached = global.mongoose = { conn: null, promise: null };\r\n}\r\n\r\n// Mongoose connection (for existing code)\r\nasync function connectDB() {\r\n  if (cached.conn) {\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    const opts = {\r\n      bufferCommands: false,\r\n    };\r\n\r\n    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {\r\n      return mongoose;\r\n    });\r\n  }\r\n\r\n  try {\r\n    cached.conn = await cached.promise;\r\n  } catch (e) {\r\n    cached.promise = null;\r\n    throw e;\r\n  }\r\n\r\n  return cached.conn;\r\n}\r\n\r\n// Native MongoDB driver connection (for API routes)\r\nlet clientPromise;\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  // In development mode, use a global variable so that the value\r\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\r\n  if (!global._mongoClientPromise) {\r\n    const client = new MongoClient(MONGODB_URI);\r\n    global._mongoClientPromise = client.connect();\r\n  }\r\n  clientPromise = global._mongoClientPromise;\r\n} else {\r\n  // In production mode, it's best to not use a global variable.\r\n  const client = new MongoClient(MONGODB_URI);\r\n  clientPromise = client.connect();\r\n}\r\n\r\n// Connect to database function expected by API routes\r\nexport async function connectToDatabase() {\r\n  try {\r\n    const client = await clientPromise;\r\n    console.log('Connected to MongoDB successfully, using database:', DB_NAME);\r\n    const db = client.db(DB_NAME); \r\n    return { client, db };\r\n  } catch (error) {\r\n    console.error('Failed to connect to database:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Export both for compatibility\r\nexport default connectDB;\r\nexport { connectDB }; "],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW,IAAI;AAC/C,MAAM,UAAU;AAEhB,uCAAkB;;AAElB;AAEA;;;;CAIC,GACD,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,0CAA0C;AAC1C,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,MAAM,IAAI,CAAC,CAAC;YACzD,OAAO;QACT;IACF;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,GAAG;QACV,OAAO,OAAO,GAAG;QACjB,MAAM;IACR;IAEA,OAAO,OAAO,IAAI;AACpB;AAEA,oDAAoD;AACpD,IAAI;AAEJ,wCAA4C;IAC1C,+DAA+D;IAC/D,6EAA6E;IAC7E,IAAI,CAAC,OAAO,mBAAmB,EAAE;QAC/B,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC;QAC/B,OAAO,mBAAmB,GAAG,OAAO,OAAO;IAC7C;IACA,gBAAgB,OAAO,mBAAmB;AAC5C,OAAO;;AAIP;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM;QACrB,QAAQ,GAAG,CAAC,sDAAsD;QAClE,MAAM,KAAK,OAAO,EAAE,CAAC;QACrB,OAAO;YAAE;YAAQ;QAAG;IACtB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,MAAM;IACR;AACF;uCAGe","debugId":null}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["file:///E:/trading-journal-app/models/User.js"],"sourcesContent":["import mongoose from 'mongoose';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nconst UserSchema = new mongoose.Schema({\r\n  fullName: {\r\n    type: String,\r\n    required: [true, 'Please provide a full name'],\r\n    maxlength: [60, 'Name cannot be more than 60 characters'],\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: [true, 'Please provide an email'],\r\n    unique: true,\r\n    lowercase: true,\r\n    match: [\r\n      /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\r\n      'Please provide a valid email',\r\n    ],\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: [true, 'Please provide a password'],\r\n    minlength: [6, 'Password must be at least 6 characters'],\r\n    select: false, // Don't include password in queries by default\r\n  },\r\n  createdAt: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n  lastLogin: {\r\n    type: Date,\r\n  },\r\n  isActive: {\r\n    type: Boolean,\r\n    default: true,\r\n  },\r\n});\r\n\r\n// Hash password before saving\r\nUserSchema.pre('save', async function (next) {\r\n  // Only hash the password if it has been modified (or is new)\r\n  if (!this.isModified('password')) return next();\r\n\r\n  try {\r\n    // Hash password with cost of 12\r\n    const hashedPassword = await bcrypt.hash(this.password, 12);\r\n    this.password = hashedPassword;\r\n    next();\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n});\r\n\r\n// Instance method to check password\r\nUserSchema.methods.comparePassword = async function (candidatePassword) {\r\n  return await bcrypt.compare(candidatePassword, this.password);\r\n};\r\n\r\n// Instance method to get user data without password\r\nUserSchema.methods.toPublicJSON = function () {\r\n  const userObject = this.toObject();\r\n  delete userObject.password;\r\n  return userObject;\r\n};\r\n\r\nexport default mongoose.models.User || mongoose.model('User', UserSchema); "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,UAAU;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAA6B;QAC9C,WAAW;YAAC;YAAI;SAAyC;IAC3D;IACA,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAA0B;QAC3C,QAAQ;QACR,WAAW;QACX,OAAO;YACL;YACA;SACD;IACH;IACA,UAAU;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAA4B;QAC7C,WAAW;YAAC;YAAG;SAAyC;QACxD,QAAQ;IACV;IACA,WAAW;QACT,MAAM;QACN,SAAS,KAAK,GAAG;IACnB;IACA,WAAW;QACT,MAAM;IACR;IACA,UAAU;QACR,MAAM;QACN,SAAS;IACX;AACF;AAEA,8BAA8B;AAC9B,WAAW,GAAG,CAAC,QAAQ,eAAgB,IAAI;IACzC,6DAA6D;IAC7D,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,OAAO;IAEzC,IAAI;QACF,gCAAgC;QAChC,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;QACxD,IAAI,CAAC,QAAQ,GAAG;QAChB;IACF,EAAE,OAAO,OAAO;QACd,KAAK;IACP;AACF;AAEA,oCAAoC;AACpC,WAAW,OAAO,CAAC,eAAe,GAAG,eAAgB,iBAAiB;IACpE,OAAO,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,mBAAmB,IAAI,CAAC,QAAQ;AAC9D;AAEA,oDAAoD;AACpD,WAAW,OAAO,CAAC,YAAY,GAAG;IAChC,MAAM,aAAa,IAAI,CAAC,QAAQ;IAChC,OAAO,WAAW,QAAQ;IAC1B,OAAO;AACT;uCAEe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ","debugId":null}},
    {"offset": {"line": 275, "column": 0}, "map": {"version":3,"sources":["file:///E:/trading-journal-app/app/api/user/profile/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport connectDB from '../../../../lib/mongodb';\nimport User from '../../../../models/User';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';\n\n// GET - Get user profile\nexport async function GET(request) {\n  try {\n    // Get token from Authorization header\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json({ error: 'No token provided' }, { status: 401 });\n    }\n\n    const token = authHeader.substring(7);\n    \n    // Verify token\n    let decoded;\n    try {\n      decoded = jwt.verify(token, JWT_SECRET);\n    } catch (error) {\n      return NextResponse.json({ error: 'Invalid token' }, { status: 401 });\n    }\n\n    // Connect to database\n    await connectDB();\n\n    // Find user\n    const user = await User.findById(decoded.userId);\n    if (!user) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      user: user.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Error fetching user profile:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n\n// PUT - Update user profile\nexport async function PUT(request) {\n  try {\n    // Get token from Authorization header\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json({ error: 'No token provided' }, { status: 401 });\n    }\n\n    const token = authHeader.substring(7);\n    \n    // Verify token\n    let decoded;\n    try {\n      console.log('Verifying token with secret:', JWT_SECRET ? 'Secret available' : 'No secret');\n      decoded = jwt.verify(token, JWT_SECRET);\n      console.log('Token verified successfully for userId:', decoded.userId);\n    } catch (error) {\n      console.error('JWT verification error:', error.message);\n      return NextResponse.json({ error: 'Invalid token: ' + error.message }, { status: 401 });\n    }\n\n    // Get request body\n    const body = await request.json();\n    const { fullName, email, currentPassword, newPassword, confirmPassword } = body;\n\n    // Connect to database\n    await connectDB();\n\n    // Find user with password for verification\n    const user = await User.findById(decoded.userId).select('+password');\n    if (!user) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    // Prepare update object\n    const updateData = {};\n\n    // Update fullName if provided\n    if (fullName && fullName.trim() !== '') {\n      updateData.fullName = fullName.trim();\n    }\n\n    // Update email if provided and different\n    if (email && email.trim() !== '' && email.toLowerCase() !== user.email) {\n      // Check if email already exists\n      const existingUser = await User.findOne({ \n        email: email.toLowerCase(),\n        _id: { $ne: user._id }\n      });\n      \n      if (existingUser) {\n        return NextResponse.json({ error: 'Email already exists' }, { status: 400 });\n      }\n      \n      updateData.email = email.toLowerCase();\n    }\n\n    // Handle password change\n    if (newPassword && newPassword.trim() !== '') {\n      // Validate current password\n      if (!currentPassword) {\n        return NextResponse.json({ error: 'Current password is required to change password' }, { status: 400 });\n      }\n\n      const isCurrentPasswordValid = await user.comparePassword(currentPassword);\n      if (!isCurrentPasswordValid) {\n        return NextResponse.json({ error: 'Current password is incorrect' }, { status: 400 });\n      }\n\n      // Validate new password\n      if (newPassword.length < 6) {\n        return NextResponse.json({ error: 'New password must be at least 6 characters long' }, { status: 400 });\n      }\n\n      // Check if passwords match\n      if (newPassword !== confirmPassword) {\n        return NextResponse.json({ error: 'New passwords do not match' }, { status: 400 });\n      }\n\n      // Hash new password\n      const hashedPassword = await bcrypt.hash(newPassword, 12);\n      updateData.password = hashedPassword;\n    }\n\n    // If no updates provided\n    if (Object.keys(updateData).length === 0) {\n      return NextResponse.json({ error: 'No valid updates provided' }, { status: 400 });\n    }\n\n    // Update user\n    const updatedUser = await User.findByIdAndUpdate(\n      decoded.userId,\n      { \n        $set: {\n          ...updateData,\n          updatedAt: new Date()\n        }\n      },\n      { new: true, runValidators: true }\n    );\n\n    return NextResponse.json({\n      success: true,\n      message: 'Profile updated successfully',\n      user: updatedUser.toPublicJSON()\n    });\n\n  } catch (error) {\n    console.error('Error updating user profile:', error);\n    \n    // Handle validation errors\n    if (error.name === 'ValidationError') {\n      const errors = Object.values(error.errors).map(err => err.message);\n      return NextResponse.json({ error: errors.join(', ') }, { status: 400 });\n    }\n    \n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}